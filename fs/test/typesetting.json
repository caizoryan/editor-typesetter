{
  "blocks": [
    {
      "type": "code",
      "output": "import {mut, mounted, render, html} from \"/lib/solid/monke.js\"\nimport html2canvas from \"/lib/html2canvas.js\"\n\nconsole.log(html2canvas)\n\nlet copy = [\n  {title: \"Conditional Design\",\n   body: `Through the influence of the media and technology on our world, our lives are increasingly characterized by speed and constant change. We live in a dynamic, data-driven society that is continually sparking new forms of human interaction and social contexts. Instead of romanticizing the past, we want to adapt our way of working to coincide with these developments, and we want our work to reflect the here and now. We want to embrace the complexity of this landscape, deliver insight into it and show both its beauty and its shortcomings. Our work focuses on processes rather than products: things that adapt to their environment, emphasize change and show difference. Instead of operating under the terms of Graphic Design, Interaction Design, Media Art or Sound Design, we want to introduce Conditional Design as a term that refers to our approach rather than our chosen media. We conduct our activities using the methods of philosophers, engineers, inventors and mystics. `},\n\n  {title: \"Process\",\n   body: `The process is the product. The most important aspects of a process are time, relationship and change. The process produces formations rather than forms. We search for unexpected but correlative, emergent patterns. Even though a process has the appearance of objectivity, we realize the fact that it stems from subjective intentions.`},\n\n  {title: \"Logic\", \n  body: ` Logic is our tool. Logic is our method for accentuating the ungraspable. A clear and logical setting emphasizes that which does not seem to fit within it. We use logic to design the conditions through which the process can take place. Design conditions using intelligible rules. Avoid arbitrary randomness. Difference should have a reason. Use rules as constraints. Constraints sharpen the perspective on the process and stimulate play within the limitations. `\n  },\n  \n  {title: \"Input\", \n  body: ` The input is our material. Input engages logic and activates and influences the process. Input should come from our external and complex environment: nature, society and its human interactions. `\n  }\n]\n\n\n\n\n\n\n\n\n\n",
      "start": 0,
      "drag_x": 2022.2080493742035,
      "drag_y": 116.11040246871018,
      "focused": false,
      "cursor": 0,
      "active": false,
      "focus": false
    },
    {
      "type": "load-component",
      "id": "3vmiea",
      "start": 2282,
      "drag_x": 1080.5677797821843,
      "drag_y": 315.29997617623286,
      "path": "test",
      "output": "",
      "active": false,
      "focus": false
    },
    {
      "type": "save-component",
      "id": "jzv2xc",
      "start": 2282,
      "drag_x": 2078.335517029807,
      "drag_y": 806.1628857463749,
      "path": "test/typesetting.json",
      "output": "",
      "active": false,
      "focus": false
    },
    {
      "type": "code",
      "id": "eak1ll",
      "start": 2282,
      "drag_x": 847.9211384222114,
      "drag_y": 1829.4056319053373,
      "focused": false,
      "output": "// const Grid = () => {\n\n//     var req = Object.assign({\n//       x:0,\n//       y:0,\n//       columns:10,\n//       rows:1,\n//       gutterWidth: 0,\n//       gutterHeight: 0,\n//       moduleWidth:50,\n//       moduleHeight:500\n//     }, options);\n\n//     // if gutter is set, override gutterWidth and gutterHeight\n//     if(typeof req.gutter !== 'undefined') {\n//       req.gutterWidth = req.gutter;\n//       req.gutterHeight = req.gutter;\n//     }\n\n//     // if width is set, override moduleWidth\n//     if(typeof req.width !== 'undefined') {\n//       req.moduleWidth = (req.width - ((req.columns-1) * req.gutterWidth)) / req.columns;\n//     } else {\n//       req.width = (req.moduleWidth * req.columns) + (req.gutterWidth * (req.columns-1))\n//     }\n\n//     // if height is set, override moduleHeigt\n//     if(typeof req.height !== 'undefined') {\n//       req.moduleHeight = (req.height - ((req.rows-1) * req.gutterHeight)) / req.rows;\n//     } else {\n//       req.height = (req.moduleHeight * req.rows) + (req.gutterHeight * (req.rows-1))\n//     }\n\n//     // Compute the grid\n//     this.state = req;\n//     this.modules = [];\n//     for(var y = 0; y < req.rows; y++) {\n//       for(var x = 0; x < req.columns; x++) {\n//         this.modules.push({\n//           x: req.x + (x * req.moduleWidth) + (x * req.gutterWidth),\n//           y: req.y + (y * req.moduleHeight) + (y * req.gutterHeight),\n//           width: req.moduleWidth,\n//           height: req.moduleHeight\n//         });\n//       }\n//     }\n\n//   }\n\n//   EasyGrid.prototype.getModule = function(column, row){\n//     var index = (column-1) + ((row-1) * this.state.columns)\n//     if(this.modules[index]) {\n//       return this.modules[index]\n//     }\n//     else {\n//       throw new Error('The column or row does not exist');\n//     }\n//   }\n\n// }\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false
    },
    {
      "type": "group",
      "id": "3uflz8",
      "start": 4103,
      "drag_x": 85.29281427793575,
      "drag_y": 77.10928205779936,
      "output": "",
      "blocks": [],
      "active": false,
      "focus": false
    },
    {
      "type": "code",
      "id": "abesam",
      "start": 4103,
      "drag_x": 2033.8417268178225,
      "drag_y": 1272.867317886394,
      "focused": false,
      "output": "class We {\n  should() {\n    return \"\"\n  }\n  \n  use(){\n    return \"\"\n  }\n  \n  want(){\n    \n  }\n}\n\nclass Word {\n  constructor(word){\n    if (word == \"logic\") return new Logic()\n    \n  }\n}\n\nclass Logic { \n  constructor(){}\n  is() { return \"our tool\" } }\nclass Input {\n  constructor(){}\n  is() { return \"our material\" } }\nclass Process { \n  is() { return \"the product\" } \n  constructor(){}\n              }\n\nfunction is(word){ return word.is() }\n\n\n\nconst M = mut({});\ndocument.M = M;\nconst defer = (fn, t = 200) => setTimeout(fn, t)\n\nconst content = (title, body) => {\n  return html`\n  h4 -- ${title}\n  p -- ${body}\n  `\n}\n\nconst Root = () => {\n  let SCALE = 3\n  let style = `\n  .page {\n    width: ${8.5 * SCALE}in;\n    height: ${11 * SCALE}in;\n    font-family: hermit;\n    background: white;\n    position: fixed;\n    transform: scale(${1/SCALE}) translateY(${-11*SCALE}in) translateX(${-8.5*SCALE}in); \n    left: 50px;\n    top: 50px;\n    \n    font-size: ${90*SCALE}pt;\n  }\n  \n\n  h4 {\n    font-size: ${18*SCALE}pt;\n    padding: ${25*SCALE}px;\n    padding-bottom: 0px;\n    margin : 0;\n  }\n  \n  p {\n    padding: ${10*SCALE}px ${25*SCALE}px;\n    max-width: ${388*SCALE}pt;\n    \n  }\n  `\n\n  let c = copy.map((section) => {\n    return content(section.title, section.body)\n  })\n\n  mounted(() =>{\n    html2canvas(document.querySelector(\".page\"))\n      .then(canvas => document.body.appendChild(canvas))\n      .then(_ => document.querySelector(\".page\").style.display = \"none\")\n  })\n\n  \n  //.page -- ${c}\n  let process = new Process()\n  let logic = new Logic()\n  let input = new Input()\n  \n  return html`\n  style -- ${style}\n  .page -- ${input.is()}\n  `\n}\n\nrender(Root,document.body)\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 1537,
      "active": true,
      "focus": true
    },
    {
      "type": "save-component",
      "id": "n52ayv",
      "start": 5781,
      "drag_x": 521.7867942950662,
      "drag_y": 1241.6966985737665,
      "path": "",
      "output": "",
      "active": false,
      "focus": false
    },
    {
      "type": "code",
      "id": "d1tw6c",
      "start": 5781,
      "drag_x": 3091.469896609844,
      "drag_y": 1134.6677084404478,
      "focused": false,
      "output": "\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false
    },
    {
      "type": "save-component",
      "id": "hq1q8g",
      "start": 5786,
      "drag_x": 190.06359894097645,
      "drag_y": 1214.557655646098,
      "path": "",
      "output": "",
      "active": false,
      "focus": false
    },
    {
      "type": "code",
      "id": "kbfw2u",
      "start": 5786,
      "drag_x": 1769.6292856632354,
      "drag_y": 1123.3665353552767,
      "focused": false,
      "output": "\n\n",
      "cursor": 0,
      "active": false,
      "focus": false
    }
  ],
  "output": ""
}