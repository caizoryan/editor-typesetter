{
  "blocks": [
    {
      "type": "load-component",
      "id": "0otrjh",
      "start": 0,
      "path": "",
      "output": "",
      "active": false,
      "focus": false,
      "drag_x": 1289.0682106508261,
      "drag_y": 1667.7271284340552,
      "drag_w": 600,
      "drag_h": 60
    },
    {
      "type": "save-component",
      "id": "d2db1m",
      "start": 0,
      "path": "test/colorlibrary.json",
      "output": "",
      "active": false,
      "focus": false,
      "drag_x": 652.867674233665,
      "drag_y": 1663.8403610106884,
      "drag_w": 600,
      "drag_h": 70,
      "autosave": true
    },
    {
      "type": "editor_sizer",
      "id": "q05bgb",
      "start": 0,
      "drag_x": 8.185538762772254,
      "drag_y": 1657.9808778476524,
      "size": "100",
      "output": "",
      "active": false,
      "drag_w": 600,
      "drag_h": 80
    },
    {
      "type": "md",
      "id": "nqch8",
      "start": 0,
      "drag_x": 2760.6478327843633,
      "drag_y": 596.9958041417224,
      "drag_w": 600,
      "drag_h": 660,
      "md": "# What do i need to make\n\n- Input color picker\n- into Set number of (swatches)\n\n## Swatch\n- ~~holds color~~\n- ~~renders a rect with color~~\n- ~~prints to a format of string: css var, hex, rgb, rgba etc~~\n\n## SwatchBox\n- ~~Array of swatches~~\n- ~~renders swatches to a container~~\n- ~~prints to json~~\n- savea to are.na (in-progress) \n- hold an are.na id and title or create new block \nin (default channel)",
      "output": "",
      "active": false,
      "focus": false
    },
    {
      "type": "code",
      "id": "1xu0na",
      "start": 0,
      "drag_x": 1144.9964404562857,
      "drag_y": 62.23171199754373,
      "drag_w": 600,
      "drag_h": 550,
      "focused": false,
      "output": "import {sig, mem, render, HTML as html,eff_on} from \"/lib/solid/monke.js\" \n\nconst CHANNEL = \"swatchbox\"\n\nconst GlobalStyle = `\n.container{\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-contents: center;\n  padding: 5em;\n  align-items: center;\n  background: #ddd;\n}\n\n.swatch-box {\n width: 80vw;\n display: grid;\n grid-template-columns: repeat(auto-fit, 300px);\n grid-gap: 20px;\n}\n\n.swatch {\n  width: 300px;\n  height: 300px;\n}\n\n`\n\n\n\n",
      "cursor": 18,
      "active": false,
      "focus": false
    },
    {
      "type": "code",
      "id": "etck6",
      "start": 443,
      "drag_x": 745.5805156017417,
      "drag_y": 616.5463466753264,
      "drag_w": 600,
      "drag_h": 950,
      "focused": false,
      "output": "class Swatch {\n  constructor(r, g, b, a){\n    this.r = sig(r)\n    this.g = sig(g)\n    this.b = sig(b)\n    this.a = sig(a)\n    \n    this.color = mem(() => [\n      this.r(),\n      this.g(),\n      this.b(),\n      this.a()\n    ])\n  }\n\n  update(r, g, b, a){\n    this.r.set(r)\n    this.r.set(g)\n    this.r.set(b)\n    this.r.set(a)\n  }\n\n  toString(){\n    return \"rgba(\"+this.color().join(\",\")+ \");\"\n  }\n  \n  render() {\n    let that = this\n    \n    // fix this mem bind thingie\n    let background = mem(() =>  \"background: \" + mem(that.toString.bind(that))())\n    return () => html`\n    <div class=\"swatch\" style=${background}>\n      ${() => color_picker(that.r, that.g, that.b, that.a)}\n    </div>\n    `\n  }\n}\n\nconst slider = \n  // takes\n    (signal, min =0, max=100) => \n    \n  // returns\n  html`\n   <input type=\"range\"\n          min=${min}\n          value=${signal}\n          oninput=${(e) => {\n            signal.set( parseFloat(e.target.value) )\n          }}\n          max=${max}>\n    </input>`\n\n\nfunction color_picker(r, g, b, a){\n  let red = slider(r, 0, 255)\n  let green = slider(g, 0, 255)\n  let blue = slider(b, 0, 255)\n  \n  let alpha = slider(a, 0, 255)\n\n  return [red, green, blue, alpha]\n}\n\nlet swatch1 = new Swatch(255,100,255,255)\nlet swatch2 = new Swatch(100,55,255,255)\nlet swatch3 = new Swatch(255,100,255,255)\nlet swatch4 = new Swatch(100,55,255,255)\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 781,
      "active": false,
      "focus": false
    },
    {
      "type": "code",
      "id": "ab6ag7",
      "active": false,
      "start": 1818,
      "drag_x": 1395.9535888331468,
      "drag_y": 612.2079534441501,
      "drag_w": 600,
      "drag_h": 940,
      "focused": false,
      "output": "class SwatchBox {\n  /**\n  * @param {Swatch[]} swatches \n  */\n  constructor(swatches, title, id){\n    this.swatches = swatches\n    this.id = id\n    this.title = title\n  }\n  \n  toString(){\n    return JSON.stringify(this.swatches, null, 2)\n  }\n\n  render() {\n    let children = this.swatches.map((swatch) => swatch.render())\n    return () => html`\n    <div class=\"swatch-box\">\n     ${children}\n    </div>`\n  }\n\n  save() {\n    // check if id exists, if not create new block\n    \n  }\n\n  create_block() {\n    // figure this out later\n    \n  }\n}\n\n\n\nasync function post(url = \"\", body, headers) {\n  try {\n    let f = await fetch(url, {\n      method: \"POST\",\n      headers: {\"Content-Type\": \"application/json\",\n                ...headers\n               },\n      body: JSON.stringify(body)\n    }).then((res) => res.json())\n    return f\n  } catch {\n    return null\n  }\n}\n\nfunction arena(auth){\n  if (!CHANNEL) throw Error(\"Need a default channel\")\n  if (!AUTH) throw Error(\"Need imported auth\")\n  \n  return {\n    /**\n    * @param {Object} body\n    * @property {string} content\n    * @property {string=} source\n    * @property {string=} description\n    */\n    create_block: (body) => \n      post(\"https://api.are.na/v2/channels/\"+CHANNEL+\"/blocks\",\n           body,\n           {Authorization: \"Bearer \" + AUTH,}\n          )\n      \n    \n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 338,
      "focus": false
    },
    {
      "type": "code",
      "id": "l5qljd",
      "start": 3158,
      "drag_x": 2031.5995804141726,
      "drag_y": 613.43188852291,
      "drag_w": 600,
      "drag_h": 360,
      "focused": false,
      "output": "let box = new SwatchBox([swatch1, swatch2])\n\n\nconst Test = (props) => html`<button>${props.children.map((e, i) => i+e)}</button`\n\nlet container = () => html`\n<style>\n  ${GlobalStyle}\n</style>\n  <${Test} title=${\"ok\"}>\n    OK????\n  <//>\n<div class=\"container\">\n  ${box.render()}\n</div>\n`\nrender(container, document.body)\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 227,
      "active": true,
      "focus": true
    },
    {
      "type": "code",
      "id": "tma0w",
      "start": 3488,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_x": 2530.184154275901,
      "drag_y": 130.30696241003372,
      "drag_w": 600,
      "drag_h": 120
    },
    {
      "type": "code",
      "id": "qzadb",
      "start": 3496,
      "drag_x": 3182.9613263722613,
      "drag_y": 115.04089735703546,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 800,
      "drag_h": 160
    },
    {
      "type": "load-component",
      "id": "6nfuj",
      "start": 3504,
      "drag_x": 65.32826980296615,
      "drag_y": 23.42805601006979,
      "drag_w": 600,
      "drag_h": 10,
      "path": "",
      "output": "",
      "active": false,
      "focus": false
    }
  ],
  "output": "",
  "properties": {
    "panzoom": {
      "initialX": -1857.7443848010485,
      "initialY": -491.30616033736095,
      "initialZoom": 0.9639330646450617
    },
    "buffer": [
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  }
}