{
  "blocks": [
    {
      "type": "save-component",
      "id": "ntiecf",
      "start": 0,
      "drag_x": 56.42465753424656,
      "drag_y": 36.493150684931535,
      "path": "test/prosemirror.json",
      "output": "",
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 60,
      "autosave": true
    },
    {
      "id": "tingipungi",
      "type": "code",
      "output": "import {mounted,mut,render, html, sig, mem, eff_on} from \"/lib/solid/monke.js\"\nimport {\n model,\n markdown,\n view,\n state,\n schema,\n schemaList,\n exampleSetup,\n commands,\n keymap, \n autocomplete,\n} from \"/lib/prosemirror/dist/main.js\"\n\n\nimport {\n  floating\n} from \"/lib/floating-ui/dist/main.js\"\n\nlet compute_position = floating.computePosition\nlet M = mut({})\ndocument.M = M\n\nlet pencil = `\n<svg viewBox=\"0 -0.5 25 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\">\n<g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n<g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g>\n<g id=\"SVGRepo_iconCarrier\"> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17.265 4.16231L19.21 5.74531C19.3978 5.9283 19.5031 6.17982 19.5015 6.44201C19.5 6.70421 19.3919 6.9545 19.202 7.13531L17.724 8.93531L12.694 15.0723C12.6069 15.1749 12.4897 15.2473 12.359 15.2793L9.75102 15.8793C9.40496 15.8936 9.10654 15.6384 9.06702 15.2943L9.18902 12.7213C9.19806 12.5899 9.25006 12.4652 9.33702 12.3663L14.15 6.50131L15.845 4.43331C16.1743 3.98505 16.7938 3.86684 17.265 4.16231Z\" stroke=\"#000000\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path> <path d=\"M5.5 18.2413C5.08579 18.2413 4.75 18.5771 4.75 18.9913C4.75 19.4056 5.08579 19.7413 5.5 19.7413V18.2413ZM19.2 19.7413C19.6142 19.7413 19.95 19.4056 19.95 18.9913C19.95 18.5771 19.6142 18.2413 19.2 18.2413V19.7413ZM14.8455 6.22062C14.6904 5.83652 14.2534 5.65082 13.8693 5.80586C13.4852 5.9609 13.2995 6.39796 13.4545 6.78206L14.8455 6.22062ZM17.8893 9.66991C18.2933 9.57863 18.5468 9.17711 18.4556 8.77308C18.3643 8.36904 17.9628 8.1155 17.5587 8.20678L17.8893 9.66991ZM5.5 19.7413H19.2V18.2413H5.5V19.7413ZM13.4545 6.78206C13.6872 7.35843 14.165 8.18012 14.8765 8.8128C15.6011 9.45718 16.633 9.95371 17.8893 9.66991L17.5587 8.20678C16.916 8.35198 16.3609 8.12551 15.8733 7.69189C15.3725 7.24656 15.0128 6.63526 14.8455 6.22062L13.4545 6.78206Z\" fill=\"#000000\"></path> </g></svg>\n`\nlet default_image = \"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "active": true,
      "focus": true,
      "start": 0,
      "drag_x": 758.5615460005635,
      "drag_y": 318.43690946966694,
      "focused": false,
      "cursor": 375,
      "drag_w": 550,
      "drag_h": 820
    },
    {
      "type": "sandbox",
      "id": "fptu49",
      "active": false,
      "focus": false,
      "start": 2042,
      "drag_x": 455.80606572619547,
      "drag_y": 2260.3222269156795,
      "drag_w": 820,
      "drag_h": 1860,
      "output": "",
      "focused": false,
      "renderer": "function (state) {\n  let render = sig(() => h(\"p\", \"...loading\"))\n  let style = mem(() => `\n    background: white;\n  `)\n  \n  setTimeout(() => {\n    let extension = [\n      EditorView.updateListener\n      .of(\n        throttle((e) => {\n          m().style.set(e.state.doc.toString()) \n          localStorage.setItem(\"recipe-style\", e.state.doc.toString())\n        }, 250))\n    ]\n    \n    let editor = make_code_mirror(m().style(), \"cssmonkey\", extension, css)\n    setTimeout(() => editor.focus(), 100)\n  } , 200 )\n  \n  \n  return h(\"div.editor-cssmonkey\", {style: style},render)  \n}",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "40rkwn",
      "start": 2042,
      "drag_x": 1416.0737505338664,
      "drag_y": 312.2783851495045,
      "focused": false,
      "output": "let style = sig(`\n@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap');\n@import url(\"https://use.typekit.net/vfz2iav.css\");\n\n*::-webkit-scrollbar {\n  display: none;\n}\n\n*{\n  font-family: \"JetBrains Mono\", monospace;\n  font-family: \"platelet\", sans-serif;\n  padding: 0;\n  margin: 0;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n\nbody {\n  background: var(--base07);\n  color: var(--base01);\n  overflow: hidden;\n}\n\ninput[type=\"text\"], button{\n  all: unset;\n  background: white;\n  border: 1px solid black;\n  padding:.3em;\n  margin: .5em;\n}\n\nbutton {\n  cursor: pointer;\n}\n\n.block-link {\n  cursor : pointer;\n  color : blue;\n  height : 2em;\n  background-size : 2em;\n  padding-left : 2.5em;\n  background-repeat : no-repeat;\n}\n\n.top-bar {\n  height: 100%;\n  padding: 1em;\n  display: flex;\n  justify-content: space-between;\n}\n\n.main {\n  display: grid;\n  width: 100vw;\n  max-width: 1400px;\n  margin: 0 auto;\n  grid-template-rows: 8% 85%;\n  padding: 1em;\n  grid-gap: 1em;\n  overflow: hidden;\n  height: 100vh;\n}\n\n.dual {\n  display: grid;\n  width: 100vw;\n  max-width: 1400px;\n  height: 100%;\n  margin: 0 auto;\n  grid-template-columns: 1fr 1fr;\n  padding: 1em;\n  grid-gap: 1em;\n  overflow: hidden;\n}\n\n.smol{\n  display: block-inline;\n  width: 15px;\n  height: : 15px;\n}\n\n.selected-result {\n  background-color: #6666;\n}\n\n.line {\n  display: grid;\n  grid-template-columns: 1fr 8fr;\n}\n\n.bottom-right{\n  position: absolute;\n  left: 1em;\n  bottom: .5em;\n  opacity: .2;\n}\n\n.ingredient-results p{\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\n.selected {\n  background-color: #4444;\n}\n\n.main > div {\n  border: 1.5px dotted #ddd;\n  box-shadow: 0 0 15px 5px #6661;\n}\n\n.editor-container{\n  overflow-y: scroll;\n  height: 100%;\n}\n\n.arena-container { \n  padding: 1em;\n  height: 100%;\n  overflow-y: scroll; \n}\n\n.auth {\n  position: absolute;\n  right: 1em;\n  font-size: .8em; \n  color: green;\n  padding: .25em;\n  border-radius: 5px;\n  border: .5px green solid;\n  margin: 1em;\n}\n\n.dishes-container, .ingredients-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 10rem);\n}\n\n#ingredient-search {\n  border: 1px red dotted;\n}\n\n.ingredient.active{\n  background-color: #F3EAEC; \n}\n\n.arena-container h2 {\n  padding: .5em;\n  margin: .5em;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: .03em;\n  border-bottom: 1px dotted grey;\n  border-radius: .25em;\n  width: 400px;\n  \n}\n\n.login .text {\n  padding: .5em;\n  margin: .5em;\n  font-weight: 300;\n  background: #5551;\n  letter-spacing: .03em;\n  border-radius: .25em;\n  width: 400px;\n  \n}\n\n.block {\n  width: 7rem;\n  border: 1px solid #0002;\n  margin: .5em;\n  padding: 1em;\n  position: relative;\n  aspect-ratio: 1/1;\n}\n\n.block:hover {\n  background-color: #0002;\n}\n\n.ProseMirror {\n  position: relative;\n  padding: 5em;\n}\n\n.ProseMirror li {\n  margin-left: 2.5em;\n}\n\n.ProseMirror h1,\n.ProseMirror h2,\n.ProseMirror h3,\n.ProseMirror h4\n{\n  margin-top: .7em;\n  margin-bottom: .2em;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n}\n\n.ProseMirror pre { white-space: pre-wrap; }\n\n.ProseMirror li { position: relative; }\n\n.ProseMirror-hideselection *::selection { background: transparent; }\n.ProseMirror-hideselection *::-moz-selection { background: transparent; }\n.ProseMirror-hideselection { caret-color: transparent; }\n\n/* See https://github.com/ProseMirror/prosemirror/issues/1421#issuecomment-1759320191 */\n.ProseMirror [draggable][contenteditable=false] { user-select: text }\n\n.ProseMirror-selectednode {\n  background-color: #9991; \n}\n\n/* Make sure li selections wrap around markers */\n\nli.ProseMirror-selectednode {\n  outline: none;\n}\n\nli.ProseMirror-selectednode:after {\n  content: \"\";\n  position: absolute;\n  left: -32px;\n  right: -2px; top: -2px; bottom: -2px;\n  border: 2px solid pink;\n  pointer-events: none;\n}\n\n/* Protect against generic img rules */\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n}\n\n\n   /* ----- */\n  /* MENU  */\n /* ----- */\n\n.ProseMirror-textblock-dropdown {\n  min-width: 3em;\n}\n\n.ProseMirror-menu {\n  margin: 0 -4px;\n  line-height: 1;\n}\n\n.ProseMirror-tooltip .ProseMirror-menu {\n  width: -webkit-fit-content;\n  width: fit-content;\n  white-space: pre;\n}\n\n.ProseMirror-menuitem {\n  margin-right: 3px;\n  display: inline-block;\n}\n\n.ProseMirror-menuseparator {\n  border-right: 1px solid #ddd;\n  margin-right: 3px;\n}\n\n.ProseMirror-menu-dropdown, .ProseMirror-menu-dropdown-menu {\n  font-size: 90%;\n  white-space: nowrap;\n}\n\n.ProseMirror-focused {\n  outline: none !important;\n  border: none;\n}\n\n.ProseMirror-menu-dropdown {\n  vertical-align: 1px;\n  cursor: pointer;\n  position: relative;\n  padding-right: 15px;\n}\n\n.ProseMirror-menu-dropdown-wrap {\n  padding: 1px 0 1px 4px;\n  display: inline-block;\n  position: relative;\n}\n\n.ProseMirror-menu-dropdown:after {\n  content: \"\";\n  border-left: 4px solid transparent;\n  border-right: 4px solid transparent;\n  border-top: 4px solid currentColor;\n  opacity: .6;\n  position: absolute;\n  right: 4px;\n  top: calc(50% - 2px);\n}\n\n.ProseMirror-menu-dropdown-menu, .ProseMirror-menu-submenu {\n  position: absolute;\n  background: white;\n  color: #666;\n  border: 1px solid #aaa;\n  padding: 2px;\n}\n\n.ProseMirror-menu-dropdown-menu {\n  z-index: 15;\n  min-width: 6em;\n}\n\n.ProseMirror-menu-dropdown-item {\n  cursor: pointer;\n  padding: 2px 8px 2px 4px;\n}\n\n.ProseMirror-menu-dropdown-item:hover {\n  background: #f2f2f2;\n}\n\n.ProseMirror-menu-submenu-wrap {\n  position: relative;\n  margin-right: -4px;\n}\n\n.ProseMirror-menu-submenu-label:after {\n  content: \"\";\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid transparent;\n  border-left: 4px solid currentColor;\n  opacity: .6;\n  position: absolute;\n  right: 4px;\n  top: calc(50% - 4px);\n}\n\n.ProseMirror-menu-submenu {\n  display: none;\n  min-width: 4em;\n  left: 100%;\n  top: -3px;\n}\n\n.ProseMirror-menu-active {\n  background: #eee;\n  border-radius: 4px;\n}\n\n.ProseMirror-menu-disabled {\n  opacity: .3;\n}\n\n.ProseMirror-menu-submenu-wrap:hover .ProseMirror-menu-submenu, .ProseMirror-menu-submenu-wrap-active .ProseMirror-menu-submenu {\n  display: block;\n}\n\n.ProseMirror-menubar-wrapper {\n  height: 100%;\n}\n.ProseMirror-menubar {\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  position: relative;\n  min-height: 1em;\n  color: #666;\n  padding: 1px 6px;\n  top: 0; left: 0; right: 0;\n  border-bottom: 1px solid silver;\n  background: white;\n  z-index: 10;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  overflow: visible;\n}\n\n.ProseMirror-icon {\n  display: inline-block;\n  line-height: .8;\n  vertical-align: -2px; /* Compensate for padding */\n  padding: 2px 8px;\n  cursor: pointer;\n}\n\n.ProseMirror-menu-disabled.ProseMirror-icon {\n  cursor: default;\n}\n\n.ProseMirror-icon svg {\n  fill: currentColor;\n  height: 1em;\n}\n\n.ProseMirror-icon span {\n  vertical-align: text-top;\n}\n\n\n\n\n`)\n\nlet cached_style = localStorage.getItem(\"recipe-style\") \nif (cached_style) style.set(cached_style)\n\nM.style = style\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 830
    },
    {
      "type": "code",
      "id": "flah7e",
      "active": false,
      "focus": false,
      "start": 9147,
      "drag_x": 2152.5340608810257,
      "drag_y": 317.16608356072237,
      "drag_w": 810,
      "drag_h": 820,
      "focused": false,
      "output": "const first_line = (str) => str ? str.split(`\\n`).shift() : \"undefined\"\nconst refresh = (slug) => client.channel(slug).hack_refresh()\n\n      \nconst selected_dish_has_me = (block) => {\n  if (selected_block()?.title == \"dish\"){\n    console.log(block.content, connections()[block.id])\n    if (connections()[block.id].find((b) => b.id == selected_block()?.id)) return true\n  }\n  else false\n} \n\nconst add_dish = () => {\n  let b\n  create_dish_block()\n    .then((block) =>  {\n      b = block\n      refresh(MAIN_CHANNEL)\n    })\n    .then((res) => {\n      if (!b) return\n      selected_block.set(b)\n    })\n    .then(() => update_channel(MAIN_CHANNEL))\n}\n\n/**\n* @returns {(Promise<import(\"/lib/arena.js\").Block | Undefined>)}\n*/\nconst add_ingredient = async (str) => {\n  let b \n  await create_ingredient_block(str)\n  .then((block) => {\n    b = block\n    return refresh(MAIN_CHANNEL)\n  })\n  .then(() => update_channel(MAIN_CHANNEL))\n  \n  return b\n}\n\nconst update_channel = (slug) => client\n  .channel(slug)\n  .get()\n  .then((c) => { \n    console.log(\"update\", c)\n    channels.set([c]) \n  })\n\nconst save_block = (content, block) => {\n  if (block && MAIN_CHANNEL) {\n    client.block(block.id).update({ content })\n      .then(_ => refresh(MAIN_CHANNEL))\n      .then(_ => update_channel(MAIN_CHANNEL))\n      .then(_ => {\n        // if selected_block = block.id\n        if (selected_block()?.id == block.id){\n          let updated = contents()\n          let this_block = updated.find((b) => b.id == selected_block()?.id)\n          if (this_block){ selected_block.set(this_block) }\n        }\n      })\n  }\n}\n\n/**\n* @description will create an ingredient block in MAIN_CHANNEL\n* @returns {Promise<import(\"/lib/arena.js\").Block>}\n*/\nconst create_dish_block = async () => {\n  let body = {\n    content: \n`# recipe name\n---\n\n### ingredients\n\n\n### instructions\n\n\n`\n  }\n  let b;\n  \n  return await client\n    .channel(MAIN_CHANNEL)\n    .create_block(body)\n    .then((block) => {\n      b = block\n      client.block(block.id).update({title: \"dish\"})\n    })\n    .then((res) => {\n      console.log(res)\n      return b\n    })\n  \n}\n\nconst create_ingredient_block = async (name) => {\n  let body = {\n    content: `# ${name}`\n  }\n  \n  let b;\n  \n  return await client\n    .channel(MAIN_CHANNEL)\n    .create_block(body)\n    .then((block) => {\n      b = block\n      client.block(block.id).update({title: \"ingredient\"})\n    })\n    .then((res) => {\n      console.log(res)\n      return b\n    })\n}\n\n\nconst link_is_block = (link) => {\n  return link.includes(\"are.na/block\");\n};\n\nconst extract_block_id = (link) => {\n  return parseInt(link.split(\"/\").pop());\n};\n\nconst marks_contain_arena_block = (marks) => {\n  let link = undefined\n  let arena_block = undefined\n  marks.forEach((e) => e.type.name == \"link\" ?\n    link = e.attrs.href:null\n  )\n\n  if (link && link_is_block(link)){\n    let id = extract_block_id(link)\n    arena_block = contents().find(b => b.id == id)\n  }\n\n  return arena_block ? arena_block : false\n}\n\nconst process_ingredients =  (block) => {\n  \n  if (!block) return\n  if (block.class == \"Text\"  && block.title == \"ingredient\"){\n    let node = markdown.defaultMarkdownParser.parse(block.content)\n    \n    node.descendants((child) => {\n      if (child.marks.length > 0){\n        let b = marks_contain_arena_block(child.marks)\n        if (b){ \n          if (child.text?.toLowerCase() == \"image\"){\n            block.image = b.image\n          }\n        }\n      }\n    })\n    return block\n  }\n}\n\n\nconst process_image_blocks =  (block) => {\n  if (!block) return\n  if (block.class == \"Image\") { return block }\n}\n\nconst fuzzy_match = (str, list) => {\n  let is = false\n  list.forEach((fuzz) => str.toLowerCase() == fuzz ?\n    is = true : null\n  )\n  return is\n}\n\nconst is_ingredients_fuzzy = (str) => {\n  if (!str) return false\n  let fuzzy = [\"ingredients\", \"ingredeints\"\n               ,\"ingredient\", \"ingredeint\"\n               ,\"ingrideint\", \"ingrideints\"\n              ]\n  return fuzzy_match(str, fuzzy)\n}\n\nconst process_dishes =  (block) => {\n  if (!block) return\n  if (block.class == \"Text\"  && block.title == \"dish\"){\n    let ingredients = []\n    let instruction_ingredients = []\n    let node = markdown.defaultMarkdownParser.parse(block.content)\n    let in_ing  = false\n    let in_inst = false\n    \n    node.descendants((child) => {\n      // -----------------\n      // Mirror this live while editing dish\n      // -----------------\n      // To get curr ingredients\n      // if instructions mentions and ingredients\n      // that are not there in ingredients, \n      // prompt or automatically add it\n      // -----------------\n      if (in_inst \n          && child.text\n          && child.marks.length > 0\n         ) {\n        let block = marks_contain_arena_block(child.marks)\n        if (block) instruction_ingredients.push({\n          node: child,\n          block\n        })\n      }\n      \n      if (child.text?.toLowerCase() == \"instructions\"){\n        in_ing = false\n        in_inst = true\n      }\n      \n      if (in_ing \n          && child.text\n          && child.marks.length > 0\n         ) {\n        let block = marks_contain_arena_block(child.marks)\n        if (block) ingredients.push(block)\n      }\n      \n      if (is_ingredients_fuzzy(child.text)){\n        in_ing = true\n        in_inst = false\n      }\n\n    })\n    block.ingredients = ingredients\n    return block\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "54hma3",
      "active": false,
      "focus": false,
      "start": 14544,
      "drag_x": 2126.332167121446,
      "drag_y": 1292.6336703640723,
      "drag_w": 730,
      "drag_h": 850,
      "focused": false,
      "output": "let client\n\n// check if logged in\n\n// fetch kitchen channel\n\n// -----------------------------\n// To do with authentication\n// -----------------------------\n// state\n// initalize\n// view\n// -----------------------------\n\n\n// ----------------------------\n// Data flow\n// ----------------------------\nlet auth = sig(localStorage.getItem(\"AUTH\"))\n\n//   --------\n//   once authenticated\n//.  logged_as is set\n//       |\n//       v\n\nlet logged_as = sig(false)\nlet unauthorized = sig (false)\n//   --------\n//   when set\n//   get main channel\n//       |\n//       v\neff_on(logged_as, () => {\n  if (logged_as() && client){\n    client.channel(MAIN_CHANNEL)\n      .get()\n      .then((res) => {\n        if (res.slug) {\n          console.log(\"got channel\", res)\n          libary_channel.set(res)\n          channels.set([res])\n        } else {\n          // handle errors\n          if (res.code == 401 || res.message == \"Unauthorized\"){\n            unauthorized.set(true)\n            console.log(\"seems like you aren't on the guest list\")\n          }\n        }\n      })\n  }\n})\n\n// -------\n//       |\n//       once this gets set\n//.      fetch channels\n//       |\n//       v\nlet libary_channel = sig(false)\n//       |\n//       v\neff_on(libary_channel, () => {\n  if (client && libary_channel()){\n    libary_channel().contents?.forEach((channel) => {\n      if (channel?.class == \"Channel\"){\n        client.channel(channel.slug)\n          .get()\n          .then((c) => {\n            channels.set( [...channels(), c] ) \n          })\n      }\n    })\n  }\n})\n\nlet channels = sig([])\nlet my_channel = mem(() => channels().find(c => c.user.slug == logged_as()))\nlet contents = mem(() => channels().map(c => c.contents).flat().filter(e=>e!=undefined))\n\n\nlet dishes = mem(() => \n  contents()\n    .map(process_dishes)\n    .filter(e=>e!=undefined))\n\nlet ingredients = mem(() => \n  contents()\n    .map(process_ingredients)\n    .filter(e=>e!=undefined))\n\nlet image_blocks = mem(() => \n  contents()\n    .map(process_image_blocks)\n    .filter(e=>e!=undefined))\n\nlet connections = mem(() => {\n  let map = {}\n  ingredients().forEach((b) => map[b.id] = [])\n  dishes().forEach(dish => {\n    dish.ingredients.forEach((block) => {\n      if (map[block.id]) map[block.id].push(dish)\n    })\n  })\n  // go through dishes, and pin to ingredients\n  console.log(\"map\", map)\n  return map\n})\n\nlet active_ingredients = mem(() => {\n  let a = ingredients()?.filter((b) => selected_dish_has_me(b))\n  console.log(\"active\", a)\n  if (a) return a\n  else return []\n})\n\nlet inactive_ingredients = mem(() => {\n  let a = ingredients()?.filter((b) => !selected_dish_has_me(b))\n  console.log(\"inactive\", a)\n  if (a) return a\n  else return []\n})\n  \nlet selected_block = sig(null)\nlet current_text = sig(\"\")\nlet editable = mem(() => (selected_block()?.user?.slug == logged_as() || !selected_block()))\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "1iocik",
      "start": 17413,
      "drag_x": 2898.0034986356645,
      "drag_y": 1300.6546621780751,
      "focused": false,
      "output": "// ---------------\n// ARENA SIDE\n// ---------------\n\nimport { Arena } from \"/js/snippet/arena.json\"\nconst MAIN_CHANNEL = \"recipe-journals\"\n\nfunction arena() {\n  // ----------------------------\n  // Initialize Are.na\n  // ----------------------------\n  let init_arena = () => {\n    // attempt auth\n    client = Arena({auth: auth()})\n    client.me().then((res) => {\n      if (res.slug) { logged_as.set(res.slug) }\n    })\n  }\n\n  // -----------------------------\n  // Login DOM\n  // -----------------------------\n  let login = () => {\n    let input = sig(\"\")\n    let oninput = (e) => input.set(e.target.value)\n    let save = () => {\n      auth.set(input())\n      localStorage.setItem(\"AUTH\", auth()) \n      init_arena()\n    }\n    return html`\n    h2 -- Login to Are.na pliss\n    .text\n      span -- To log in, get an auth code from \n      a [href=https://arena-token-gen.vercel.app/] -- this link \n      span -- and then enter it below.\n    \n    .login-panel\n      input [type=text oninput=${oninput}] \n      button [onclick=${save}] -- save\n    `\n  }\n  \n  let logger = mem(() => {\n    if (!auth()){\n      return login()\n      console.log(\"no auth\")\n    } \n    else if (unauthorized()){\n      return html`\n        h2 -- seems like you aren't on the guest list\n        p.text -- Ask Aaryan to add you as a collaborator. If you don't know who Aaryan is, I'm confused how you got here.\n      `\n    } else {\n      init_arena()\n      return html`span.auth -- ${logged_as}`\n    }\n  })\n\n  let pencil_icon = () => {\n    let elem = document.createElement(\"span\")\n    elem.innerHTML = pencil\n    return elem\n  } \n\n  \n  let ing_dom = (active) => (block) => {\n    let editable = mem(() => {\n      if(block.user?.slug == logged_as()){\n        return pencil_icon\n      }\n    })\n    \n    let s = mem(() => {\n      return (selected_block()?.id == block.id) \n    })\n    \n    let classes = mem(() => `block ingredient ${s() ? \"selected\" : \"\"} ${active ? \"active\" : \"\"}`)\n\n    return html`\n    div [\n      class=${classes}\n      onclick=${() => selected_block.set(block)}\n      style=cursor:pointer ]\n      p -- ${first_line(block.content)}\n      span.bottom-right -- ${editable}\n      \n    `\n  }\n\n  let active_ing_dom = ing_dom(true)\n  let inactive_ing_dom = ing_dom(false)\n  \n\n  \n  let dish_dom = block => {\n    let editable = mem(() => {\n      if(block.user?.slug == logged_as()){\n        return pencil_icon\n      }\n    })\n\n    let s = mem(() => selected_block()?.id == block.id)\n    let classes = mem(() => `block dish ${s() ? \"selected\" : \"\"}`)\n    \n    return html`\n    div [\n      class=${classes}\n      onclick=${() => selected_block.set(block)}\n      style=cursor:pointer ]\n      \n      p -- ${first_line(block.content)}\n      span.bottom-right -- ${editable}\n    `\n  }\n\n  let carrier_bag = mem(() => {\n    if (logged_as()) return html`\n      h2 -- Dishes\n      button [onclick=${add_dish}] -- Add\n      .dishes-container\n        each of ${dishes} as ${dish_dom}\n        \n      h2 -- Ingredients\n      .ingredients-container\n         each of ${active_ingredients} as ${active_ing_dom}\n         each of ${inactive_ingredients} as ${inactive_ing_dom}\n      .panel \n        input [id=new-ingredient]\n        button [onclick=${() => add_ingredient(document.getElementById(\"new-ingredient\")?.value)}] -- Add\n      \n    `\n  })\n\n  return html`\n    .login -- ${logger}\n    .bag -- ${carrier_bag}\n  `\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 710,
      "drag_h": 740
    },
    {
      "type": "code",
      "id": "k5kwdp",
      "active": false,
      "focus": false,
      "start": 20831,
      "drag_x": 3678.0034986356645,
      "drag_y": 1300.6546621780751,
      "drag_w": 600,
      "drag_h": 400,
      "focused": false,
      "output": "function top_bar() {\n  let unsaved = mem(() => current_text() != selected_block()?.content)\n  return html `\n   .top-bar\n     .notify -- !()!\n     .info -- [${() => unsaved() ? \"unsaved\": \"saved\"}]\n     .buttons -- (save)\n  `\n}\n\n\n\n\n\n",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "iu9n3c",
      "active": false,
      "focus": false,
      "start": 21063,
      "drag_x": 2940.58654041603,
      "drag_y": 2400.287508699959,
      "drag_w": 860,
      "drag_h": 960,
      "focused": false,
      "output": "function insertText(text, from, to, state, dispatch) {\n  dispatch(state.tr.insertText(text, from, to))\n}\n\nfunction setMarkLink(href, state, dispatch) {\n  dispatch(\n    state.tr.setStoredMarks([markdown.schema.mark(markdown.schema.marks.link, { href })])\n  )\n}\n\nfunction autocomplete_search(){\n  const filter = sig(\"\")\n  const action = sig(\"ingredients\")\n  const _show = sig(false)\n  const x = sig(0)\n  const y = sig(0)\n\n  \n  const filtered = mem(() => \n    action() == \"ingredients\" \n    ? ingredients()\n        .filter(e => \n          {\n          return first_line(e.content).toLowerCase()\n          .includes(filter().toLowerCase())\n          })\n        .concat([{content: \"Add: \"+filter()}])\n    \n    : image_blocks()\n      .filter(e => \n        {\n          console.log(\"b\", e)\n        return first_line(e.title).toLowerCase()\n        .includes(filter().toLowerCase())\n        })\n  )\n  \n  \n  const cursor = sig(-1)\n  eff_on(filter, () => cursor.set(-1))\n  \n  const cursor_next = () => {\n    cursor() + 1 < filtered().length\n    ? cursor.set(cursor() + 1)\n    : null\n  }\n  \n  const cursor_prev = () => \n    cursor() - 1 > -1 \n    ? cursor.set(cursor() - 1)\n    : null\n  \n  const enter = (view, range) => {\n    let current = filtered()[cursor()]\n    if (!current) return\n    console.log(current)\n    \n    if (current.content.includes(\"Add:\")){\n      console.log(\"clicked add\")\n      let ingredient = view.state.doc.cut(range.from + 1, range.to).textContent.trim()\n      if (ingredient) {\n        add_ingredient(ingredient).then((block) => {\n          if (!block){\n            console.log(\"Block nahi mila...\")\n            return\n          }\n          let link = \"https://are.na/blocks/\"+ block.id\n          setMarkLink(link, view.state, view.dispatch)\n          \n          // Todo: replace all #\n          insertText(first_line(block.content).replace(\"#\", \"\").trim(), range.from, range.to, view.state, view.dispatch)\n        })\n      }\n      \n      \n      return true\n      \n    }\n    \n    else {\n      // ----------------\n      // add ingredient\n      // ----------------\n      let link = \"https://are.na/blocks/\"+ current.id\n      setMarkLink(link, view.state, view.dispatch)\n      \n      // Todo: replace all #\n      if (action() == \"ingredients\"){\n        insertText(first_line(current.content).replace(\"#\", \"\").trim(), range.from, range.to, view.state, view.dispatch)\n      }\n        \n      else {\n        insertText(\"image\", range.from, range.to, view.state, view.dispatch)\n      }\n    }\n  }\n\n  const w = 300\n  const style = mem(() => `\n    position: fixed;\n    display: ${_show() ? \"block\" : \"none\"};\n    width: ${w}px;\n    height: 200px;\n    top: ${y()}px;\n    left: ${x() + w}px;\n    background: white;\n    border: 1px solid black;\n    padding: .5em;\n    z-index: 99;\n    \n  `\n  )\n  \n  /**\n  * @param {string} str\n  */\n  const set_filter = (str) => filter.set(str)\n\n  /**\n  * @param {{x: number, y: number}} pos\n  */\n  const set_position = (pos) => {\n    if (pos.x) x.set(pos.x)\n    if (pos.y) y.set(pos.y)\n  }\n\n  const line = (e) =>action() == \"ingredients\" \n    ? first_line(e.content).replace(\"#\", \" \")\n    : e.title\n\n  const img = (e) => e.image? html`img.smol [src=${e.image.thumb.url}]` : \"\"\n  \n  const render = () => {\n   return html`\n      .ingredient-results [style=${style}]\n        each of ${filtered} as ${(e, i) => html`\n           div [class=${mem(() => `line ${i() == cursor() ? \"selected-result\": \"\"}`)}]\n            span -- ${img(e)}\n            p  -- ${line(e)} \n        `}\n    `\n  }\n  \n  return {\n    render,\n    set_filter,\n    set_position,\n    cursor_next,\n    cursor_prev,\n    enter,\n\n    reset: () => {\n      filter.set(\"\")\n      cursor.set(-1)\n    },\n\n    action: (act) => action.set(act),\n    \n    hide: () => _show.set(false),\n    show: () => _show.set(true),\n    showing: _show\n  }\n}\n\nfunction handle_ingredient_search(action){\n  console.log()\n  let anchor = document.getElementById(\"ingredient-search\")\n  let floating = document.querySelector(\".ingredient-results\")\n\n  if (action.kind == \"open\"){\n    complete.action(action.type.name)\n    compute_position( anchor, floating,\n      {\n        strategy: \"fixed\",\n        placement: 'bottom-end',\n      }\n    ).then(({x, y}) => {\n      complete.set_position({x, y})\n    })\n    \n    complete.show()\n    return true\n  }\n\n  if (action.kind == \"close\"){\n    complete.reset()\n    complete.hide()\n    return true\n  }\n\n  if (action.kind == \"filter\") {\n    complete.set_filter(action.filter)\n    return true\n  }\n  \n  if (action.kind == \"enter\") {\n    complete.enter(action.view, action.range)\n    complete.reset()\n    complete.hide()\n    return true\n  }\n  \n  if (action.kind == \"ArrowDown\") {\n    complete.cursor_next()\n    return true\n  }\n  \n  if (action.kind == \"ArrowUp\") {\n    complete.cursor_prev()\n    return true\n  }\n  \n}\n\nlet complete = autocomplete_search()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 749
    },
    {
      "type": "code",
      "id": "lp73bl",
      "active": false,
      "focus": false,
      "start": 25944,
      "drag_x": 2930.58654041603,
      "drag_y": 3420.287508699959,
      "drag_w": 840,
      "drag_h": 800,
      "focused": false,
      "output": "function Editor() {\n  mounted(() => {\n    let v = createEditor(\"\")\n    eff_on(selected_block, () => {\n      if (selected_block()){\n        if (v) v.destroy()\n        v =  createEditor(selected_block().content, selected_block())\n      }\n    })\n  })\n  \n  return html` #editor -- ${complete.render} `\n}\n\n// -------------------------\n// Editor Creator\n// -------------------------\nfunction createEditor(text, block){\n  current_text.set(text)\n  let auto = autocomplete.autocomplete\n  \n  \n  const options = {\n    reducer: handle_ingredient_search,\n    triggers: [\n      { \n        name: 'images',\n        trigger: '@', \n        decorationAttrs: { id: 'ingredient-search' } \n      },\n      { \n        name: 'ingredients',\n        trigger: '/', \n        decorationAttrs: { id: 'ingredient-search' } \n      },\n    ],\n  };\n  \n  let v =  new view.EditorView(document.querySelector(\"#editor\"), {\n    state: state.EditorState.create({\n      doc: markdown.defaultMarkdownParser.parse(text),\n      plugins: [\n        ...auto(options),\n        ...exampleSetup.exampleSetup({schema: markdown.schema, menuBar: false}),\n        keymap.keymap({ \n          \"Mod-s\": (state) => \n            save_block(\n              markdown.defaultMarkdownSerializer.serialize(state.doc), \n              block) \n        })  \n      ]\n    }),\n\n    dispatchTransaction(transaction) {\n      if (transaction.docChanged){\n        // -----------------\n        // Todo: probably don't call every keystroke\n        // ----------------\n        let d = markdown.defaultMarkdownSerializer.serialize(transaction.doc)\n        current_text.set(d)\n      }\n      \n      let newState = v.state.apply(transaction) \n      v.updateState(newState)\n    },\n    \n    \n    editable,\n    nodeViews: { },\n    markViews: {\n      link(mark) {\n        let dom = document.createElement(\"div\")\n        dom.style.display = \"inline-block\"\n        let block = marks_contain_arena_block([mark])\n        \n        if (block){\n          dom.classList.add(\"block-link\")\n          dom.onclick = () => selected_block.set(block)\n          \n          if (block.image){\n            dom.style.backgroundImage = \"url(\"+block.image.thumb.url+\")\"\n          }\n          else {\n            dom.style.backgroundImage = \"url(\"+default_image+\")\"\n          }\n        }\n  \n        return { dom }\n        \n      }\n    }\n    \n  })\n  return v \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 469
    },
    {
      "type": "code",
      "id": "zq0k7",
      "start": 28308,
      "drag_x": 3881.1730808320594,
      "drag_y": 3421.8129246252765,
      "focused": false,
      "output": "const Root = () => {\n  return html`\n  style -- ${style}\n  .main\n    .bar-container -- ${top_bar}\n    .dual\n      .editor-container -- ${Editor}\n      .arena-container -- ${arena}\n  `\n}\n\nrender(Root, document.body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 810,
      "drag_h": 780
    }
  ],
  "output": "",
  "properties": {
    "panzoom": {
      "initialX": -658.5614663170852,
      "initialY": -218.4383219424591,
      "initialZoom": 1
    },
    "buffer": [
      1,
      6,
      2,
      5,
      6
    ]
  }
}