{
  "blocks": [
    {
      "type": "group",
      "id": "lck1sn",
      "active": false,
      "focus": false,
      "start": 0,
      "drag_x": 7795,
      "drag_y": 607,
      "drag_w": 600,
      "drag_h": 400,
      "output": "\n\n\n",
      "blocks": [
        {
          "type": "code",
          "id": "k3mvtl",
          "start": 0,
          "focused": false,
          "output": "\n",
          "cursor": 0
        },
        {
          "type": "code",
          "id": "1i4pjg",
          "start": 1,
          "focused": false,
          "output": "\n",
          "cursor": 0
        },
        {
          "type": "code",
          "id": "zhewm",
          "start": 2,
          "focused": false,
          "output": "\n",
          "cursor": 0
        }
      ]
    },
    {
      "type": "load-component",
      "id": "0otrjh",
      "start": 3,
      "path": "",
      "output": "",
      "active": false,
      "focus": false,
      "drag_x": 5406.68741741654,
      "drag_y": 838.614024024591,
      "drag_w": 600,
      "drag_h": 60
    },
    {
      "type": "save-component",
      "id": "d2db1m",
      "start": 3,
      "path": "test/type/header.json",
      "output": "",
      "active": false,
      "focus": false,
      "drag_x": 5398.35006486399,
      "drag_y": 685.1983621627289,
      "drag_w": 600,
      "drag_h": 70,
      "autosave": true
    },
    {
      "type": "md",
      "id": "nqch8",
      "start": 3,
      "drag_x": 3372.551242175868,
      "drag_y": 218.2073486029874,
      "drag_w": 600,
      "drag_h": 660,
      "md": "# What do i need to make\n\n### Typesetter (basic)\n- Leading\n- Typeface\n- font-size\n- tracking (line -> add mode for setting lines(not nodes))\n- kerning\n\n\n### Typesetter (macro)\n- rect (w, h, x, y)\n- overflow\n- paragraph styles!\n\n\n### Typesetter (Export!)\n- pdf export (first can just be images in pdf)\n- image export \n- PDF Text export (use one of the pdf libraries)\n- booklet binding and stuff\n\n\n\n",
      "output": "",
      "active": false,
      "focus": false
    },
    {
      "type": "code",
      "id": "1xu0na",
      "start": 3,
      "drag_x": 2626.776595696773,
      "drag_y": 206.02024232410423,
      "drag_w": 600,
      "drag_h": 550,
      "focused": false,
      "output": "import {sig, mem, render, HTML as html,eff_on} from \"/lib/solid/monke.js\" \nimport {hyphenateSync} from \"/lib/hyphenator/hyphenate.js\"\nimport {Q5 as p5} from \"/lib/q5/q5.js\" \n\nconst GlobalStyle = `\n.container{\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #ddd;\n}\n\n.q5{\n  width: min-content;\n}\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false
    },
    {
      "type": "group",
      "id": "0f19g",
      "active": false,
      "focus": false,
      "start": 437,
      "drag_x": 1108.72174010924,
      "drag_y": 95.1539418194856,
      "drag_w": 600,
      "drag_h": 400,
      "output": "",
      "blocks": []
    },
    {
      "type": "code",
      "id": "etck6",
      "start": 437,
      "drag_x": 66.30788363897116,
      "drag_y": 95.1539418194856,
      "drag_w": 930,
      "drag_h": 800,
      "focused": false,
      "output": "/**\n@typedef {{\n  horizontal_pos: number,\n  word_count: number,\n  hyphen_leftover: \"\",\n  space_size: number,\n}} LineState\n\n@typedef {{ \n  beforeHyphenate: (props: ParagraphHookProps) => void \n  afterHyphenate: (props: ParagraphHookProps) => void \n  beforeWord: (props: ParagraphHookProps) => void \n  afterWord: (props: ParagraphHookProps) => void \n}} LineHooks\n\n@typedef {{\n  paragraph_state: ParagraphState,\n  paragraph: Paragraph,\n}} ParentState\n\n@param {string} text\n@param {Unit} length\n@param {Unit} x\n@param {Unit} y\n@param {LineHooks=} hooks\n@param {ParentState} state\n@param {p5} p\n\n@description takes text and length, and returns overflowed text.\n*/\nlet draw_line = (p, text, x, y, length, state, hooks, ) => {\n  let lines = text.split(`\\n`)\n  let words = lines.shift().split(\" \")\n  let end_lines = `\\n`+lines.join(`\\n`)\n  \n  let skip = false\n\n  /**@type LineState*/\n  let line_state = {\n    space_size : p.textWidth(\" \"),\n    hyphen_leftover: \"\",\n    horizontal_pos: 0,\n    word_count: 0,\n  }\n\n  let try_hyphenation = (word) => {\n    let hyphenated = hyphenateSync(word, {\n      hyphenChar: \"---((---))---\"\n    }).split(\"---((---))---\")\n\n    // try to put first of hyphenated in...\n    let lexeme = hyphenated.shift()\n    let word_len = p.textWidth(lexeme)\n    \n    if (line_state.horizontal_pos + word_len < length.px) {\n      let _fill = p.ctx.fillStyle\n      // hook to change color of hyphenated\n      p.fill(p.color(\"red\"))\n      p.text(lexeme+\"-\", x.px+line_state.horizontal_pos, y.px)\n      p.fill(_fill)\n      return hyphenated.join(\"\")\n    }\n\n    return false\n  }\n\n  const props = () => ({\n    paragraph_state: state.paragraph_state,\n    line_state: line_state,\n    paragraph: state.paragraph,\n    p: p,\n  })\n\n  words.forEach(word => {\n    if (skip) return\n    let word_len = p.textWidth(word)\n    \n    if (typeof hooks?.beforeWord == \"function\") hooks?.beforeWord(props())\n    if (line_state.horizontal_pos + word_len > length.px) {\n      // try hyphenation...\n      if (!state.paragraph.hyphenate) return\n      let _leftover = try_hyphenation(word)\n      if (_leftover){ \n        line_state.hyphen_leftover = _leftover\n        line_state.word_count++\n      }\n      skip = true\n      return\n    }\n\n    let _fill = p.ctx.fillStyle\n    if (word.includes(`\\n`)){\n      p.fill(p.color(\"red\"))\n    }\n\n    p.text(word, x.px+line_state.horizontal_pos, y.px)\n    p.fill(_fill)\n    line_state.horizontal_pos += word_len\n    line_state.horizontal_pos += line_state.space_size \n    line_state.word_count++\n  })\n\n  p.opacity(1)\n  words = words.slice(line_state.word_count).join(\" \")\n\n  return line_state.hyphen_leftover + \" \" + words + end_lines\n}\n\n",
      "cursor": 1986,
      "active": true,
      "focus": true
    },
    {
      "type": "code",
      "id": "tma0w",
      "start": 3094,
      "focused": false,
      "output": "/**\n@param {ParagraphProps} paragraph\n@param {p5} p\n@param {Grid} grid \n\n@description takes text and length, and returns overflowed text.\n*/\nlet draw_paragraph = (p, paragraph, grid) => {\n  const is_fn = fn => typeof fn == \"function\"\n\n  //@ts-ignore\n  if (paragraph.x && is_fn(paragraph.x)) paragraph.x = paragraph.x(grid)\n  //@ts-ignore\n  if (paragraph.y && is_fn(paragraph.y)) paragraph.y = paragraph.y(grid)\n  //@ts-ignore\n  if (paragraph.length && is_fn(paragraph.length)) paragraph.length = paragraph.length(grid)\n  //@ts-ignore\n  if (paragraph.height && is_fn(paragraph.height)) paragraph.height = paragraph.height(grid)\n  \n  /**@type Paragraph*/\n  let _paragraph = Object.assign({\n    text: \"\", \n    font_family: \"monospace\",\n    font_weight: 300,\n    x : {px: 10},\n    y : {px: 10},\n    height : {px: 100},\n    length : {px:100},\n    leading : {px: 12},\n    \n    color : p.color(\"black\"),\n    stroke : p.color(\"black\"),\n    font_size: {px: 14},\n    rect : true,\n    hooks: {},\n    hyphenate: true\n  }, paragraph)\n\n\n  p.textSize(_paragraph.font_size.px)\n  p.textFont(_paragraph.font_family)\n  p.textWeight(_paragraph.font_weight)\n  \n  /**@type ParagraphState*/\n  let paragraph_state = {\n    vertical_pos: _paragraph.y.px + p.textLeading(),\n    word_count: 0,\n  }\n  \n  if (_paragraph.rect){\n    p.noFill();\n    p.stroke(_paragraph.stroke);\n    p.rect(_paragraph.x.px, _paragraph.y.px, _paragraph.length.px, _paragraph.height.px);\n  }\n  \n  p.noStroke();\n  p.fill(_paragraph.color)\n  let start_length = _paragraph.text.length\n  \n  while (_paragraph.text.length > 0 && paragraph_state.vertical_pos < _paragraph.y.px+_paragraph.height.px) {\n    paragraph_state.word_count = start_length - _paragraph.text.length\n    _paragraph.text = draw_line(\n      p,\n      _paragraph.text,\n      _paragraph.x,\n      {px: paragraph_state.vertical_pos},\n      _paragraph.length,\n      {\n        paragraph: _paragraph,\n        paragraph_state\n      },\n      _paragraph.hooks\n    ).trim()\n    paragraph_state.vertical_pos+=_paragraph.leading.px\n  }\n\n\n\n  return _paragraph.text\n}\n\n/**\n@typedef {{\n  vertical_pos: number,\n  word_count: number,\n}} ParagraphState\n\n@typedef {{\n  line_state: LineState,\n  paragraph_state: ParagraphState,\n  paragraph: Paragraph,\n  p: p5\n}} ParagraphHookProps\n\n@typedef {{ \n  beforeHyphenate?: (props: ParagraphHookProps) => void \n  afterHyphenate?: (props: ParagraphHookProps) => void \n  beforeWord?: (props: ParagraphHookProps) => void \n  afterWord?: (props: ParagraphHookProps) => void \n  beforeLine?: (props: ParagraphHookProps) => void\n  afterLine?: (props: ParagraphHookProps) => void\n}} ParagraphHooks\n\n@typedef {(grid: Grid) => Unit} GridUnit\n\n@typedef {object} Paragraph\n@property {string} text\n@property {Unit} length\n@property {*} font_family\n@property {number} font_weight\n@property {Unit} leading\n@property {Unit} font_size\n@property {Unit} height\n@property {Color} color\n@property {Color} stroke\n@property {Unit} x\n@property {Unit} y\n@property {boolean} rect \n@property {boolean} hyphenate \n@property {ParagraphHooks} hooks\n\n@typedef {object} ParagraphProps\n@property {boolean=} hyphenate\n@property {string} text\n@property {*=} font_family\n@property {number=} font_weight\n\n@property {Unit=} leading\n@property {Unit=} font_size\n\n@property {(Unit | GridUnit)=} length\n@property {(Unit | GridUnit)=} height\n@property {(Unit | GridUnit)=} x\n@property {(Unit | GridUnit)=} y\n\n@property {Color=} color\n@property {Color=} stroke\n\n@property {boolean=} rect \n@property {ParagraphHooks=} hooks\n\n*/\n\n\n",
      "cursor": 1738,
      "active": false,
      "focus": false,
      "drag_x": 47.87092010331711,
      "drag_y": 1013.0860532644555,
      "drag_w": 960,
      "drag_h": 630
    },
    {
      "type": "code",
      "id": "38y5tn",
      "active": false,
      "focus": false,
      "start": 6610,
      "drag_x": 1102.7541430204776,
      "drag_y": 994.7951191837312,
      "drag_w": 823.0771600801022,
      "drag_h": 660.2566867601192,
      "focused": false,
      "output": "/**\n@typedef {(\"inch\" | \"pica\" | \"point\" | \"em\" | \"pixel\")} UnitType\n@typedef {{\n  unit?: UnitType,\n  value?: number,\n  px: number\n}} Unit\n\n*/\nclass Scale{\n  constructor(scale = 1, viewport = 1){\n    this.dpi = window.devicePixelRatio * 96\n    this.scale = scale / this.dpi\n  }\n\n  /**\n  @param {Unit} unit1 \n  @param {Unit} unit2 \n  */\n  add(unit1, unit2){\n    return this.px_raw( unit1.px + unit2.px )\n  }\n\n  /**\n  @param {number} value \n  @returns {Unit} \n  */\n  em(value){\n    return {\n      unit:\"em\",\n      value,\n      px: this.inch(value/6).px\n    }\n  }\n\n  /**\n  @param {number} value \n  @returns {Unit} \n  */\n  px(value){\n    return {\n      unit: \"pixel\",\n      value,\n      px: value*this.scale\n    }\n  }\n\n  /**\n  @param {number} value \n  @returns {Unit} \n  */\n  px_raw(value){\n    return {\n      unit: \"pixel\",\n      value,\n      px: value\n    }\n  }\n\n  pixel(value){return this.px(value)}\n\n  /**\n  @param {number} value \n  @returns {Unit} \n  */\n  inch(value){\n    return { \n      unit: \"inch\",\n      value,\n      px: value * this.dpi * this.scale\n    }\n  }\n\n  /**\n  @param {number} value \n  @returns {Unit} \n  */\n  pica(value){ return this.em(value) }\n  picas(value){return this.pica(value)}\n\n\n  /**\n  @param {number} value \n  @returns {Unit} \n  */\n  point(value){\n    return {\n      unit: \"point\",\n      value,\n      px: this.pica(value).px / 12\n    }\n  }\n  \n}\n\n\n",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "axlae",
      "active": false,
      "focus": false,
      "start": 7984,
      "drag_x": 1990.6480608705974,
      "drag_y": 1015.6808920098588,
      "drag_w": 600,
      "drag_h": 685.6223357050137,
      "focused": false,
      "output": "class LinkedFrame{\n  /**\n  @param {ParagraphProps[]} [frames=[]] \n  @param {string} [text=\"\"] \n  */\n  constructor(text = \"\", frames = []){\n    this.frames = frames\n    this.text = text\n  }\n\n  /**\n  @param {ParagraphProps} frame \n  */\n  add(frame){\n    this.frames.push(frame)\n  }\n\n  set_text(text){\n    this.text = text\n  }\n\n  /**\n  @param {p5} p \n  @param {SpreadProps} props \n  */\n  draw(p, props){\n    let text = this.text\n    let count = 0\n    /**@type {ParagraphProps}*/\n    let last_props = {text:\"\"}\n    \n    while(text && count < this.frames.length){\n      let updated = this.frames[count]\n      updated.text = text\n      Object.assign(last_props, updated)\n      \n      text = draw_paragraph(p, last_props, props.structure)\n      count++\n    }\n    \n    return text\n  }\n}\n\n\n",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "vwnok",
      "active": false,
      "focus": false,
      "start": 8765,
      "drag_x": 2713.339904235294,
      "drag_y": 947.5507056965099,
      "drag_w": 600,
      "drag_h": 711.5880025872877,
      "focused": false,
      "output": "/** \n@typedef {{\n  margin: {\n    top: Unit,\n    bottom: Unit,\n    inside: Unit,\n    outside: Unit,\n  }\n\n  columns: number,\n  gutter: Unit,\n  \n  hanglines: Unit[]\n  page_width: Unit,\n  page_height: Unit,\n}} GridProps\n*/\nclass Grid {\n  /**\n  @param {GridProps} props\n  @param {Scale} s\n  */\n  constructor(props, s){\n    this.props = props\n    this.s = s\n  }\n\n  set_margin(margin){\n    this.props.margin = margin\n  }\n  \n  /**@returns {{x:Unit, y:Unit, w:Unit, h: Unit}[]}*/\n  recto_columns  ()  {\n    /**@type {{x:Unit, y:Unit, w:Unit, h: Unit}[]}*/\n    const cols = []\n\n    for(let i = 0; i < this.props.columns; i++){\n      const y = this.props.margin.top\n      const w = this.column_width()\n      \n      // outside + gutters + size\n      const x = s.px_raw(this.half_page().x.px + this.props.margin.inside.px + i * this.props.gutter.px + i * this.column_width().px);\n      const h = s.px_raw(this.props.page_height.px - (this.props.margin.top.px + this.props.margin.bottom.px))\n\n      cols.push({x, y, w, h })\n    }\n\n    return cols\n  }\n  \n  /**@returns {{x:Unit, y:Unit, w:Unit, h: Unit}[]}*/\n  verso_columns  ()  {\n    /**@type {{x:Unit, y:Unit, w:Unit, h: Unit}[]}*/\n    const cols = []\n\n    for(let i = 0; i < this.props.columns; i++){\n      const y = this.props.margin.top\n      const w = this.column_width()\n      \n      // outside + gutters + size\n      const x = s.px_raw(this.props.margin.outside.px + i * this.props.gutter.px + i * this.column_width().px);\n      const h = s.px_raw(this.props.page_height.px - (this.props.margin.top.px + this.props.margin.bottom.px))\n\n      cols.push({x, y, w, h })\n    }\n\n    return cols\n  }\n  \n  columns () {return  [this.verso_columns(), this.recto_columns()]}\n\n  /**@returns {Unit}*/\n  column_width (n = 1) {\n    let w = this.half_page().x.px - (this.props.margin.inside.px + this.props.margin.outside.px);\n    let g = (n - 1) * this.props.gutter.px\n    return s.px_raw(((w - (this.props.gutter.px * (this.props.columns - 1))) / this.props.columns)*n + g ) ;\n  }\n  \n  /**@returns {{x: Unit, y: Unit}}*/\n  half_page () {\n    return {\n      x: s.px_raw(this.props.page_width.px / 2),\n      y: s.px_raw(this.props.page_height.px / 2)\n    }\n  }\n}\n\n\n",
      "cursor": 29
    },
    {
      "type": "code",
      "id": "wzufij",
      "active": false,
      "focus": false,
      "start": 10958,
      "drag_x": 3408.1636998715785,
      "drag_y": 934.7891985387771,
      "drag_w": 600,
      "drag_h": 678.5969125424308,
      "focused": false,
      "output": "/**\n@typedef Drawable\n@property {(p: p5, props: SpreadProps) => void} draw\n\n@typedef {{\n  structure: Grid,\n  scale: Scale,\n}} SpreadProps\n*/\nclass Spread{\n  /**\n  @param {Grid} grid \n  @param {Scale} [scale=new Scale()] \n  @param {Drawable[]} [contents=[]] \n  */\n  constructor(grid, scale = new Scale(), contents = []){\n    /**@type Scale*/\n    this.s = scale\n    /**@type Grid*/\n    this.structure = grid\n    /**@type Drawable[]*/\n    this.contents = contents\n  }\n\n  setup(p){\n    // if needing to create canvas as well\n  }\n  \n  draw(p){\n    this.contents.forEach(d => d.draw(p, this.props()))\n  }\n\n  draw_grid(p, no) {\n    // -----------\n    // draw grid\n    // -----------\n    let [recto, verso] = grid.columns()\n    p.fill(0)\n    p.textSize(this.s.point(9).px)\n    p.textFont(\"monospace\")\n    p.textWeight(600)\n    p.text(\"[ PAGE \"+(no[0])+\" ]\", this.structure.verso_columns()[0].x.px, this.s.em(3).px)\n    p.text(\"[ PAGE \"+(no[1])+\" ]\",\n           this.structure.recto_columns()[0].x.px,\n           this.structure.recto_columns()[3].y.px)\n    \n    p.noFill()\n    p.stroke(0)\n    p.strokeWeight(.2)\n    \n    \n    recto.forEach((col) => { p.rect(col.x.px, col.y.px, col.w.px, col.h.px)}) \n    verso.forEach((col) => { p.rect(col.x.px, col.y.px, col.w.px, col.h.px)})\n  }\n  \n\n  /**@returns {SpreadProps}*/\n  props(){\n    return {\n      scale: this.s,\n      structure: this.structure\n    }\n  }\n  \n  /**\n  @param {LinkedFrame} frame \n  */\n  add_linked_frame(frame){\n    this.contents.push(frame)\n  }\n  \n  // --------\n  // Later\n  // --------\n  add_graphic(){}\n}\n\n\n\n",
      "cursor": 75
    },
    {
      "type": "code",
      "id": "pyvb3e",
      "active": false,
      "focus": false,
      "start": 12523,
      "drag_x": 4095.856750970469,
      "drag_y": 929.0349334145069,
      "drag_w": 852.711972506926,
      "drag_h": 698.6596038718222,
      "focused": false,
      "output": "\nclass Book {\n  /**\n  @param {Spread[]} [spreads=[]] \n  @param {{draw_grid: boolean}=} opts\n  */\n  constructor(spreads = [], opts = {draw_grid:true}){\n    this.grid = opts.draw_grid\n    \n    this.current_spread = 0\n    /**@type Spread[]*/\n    this.spreads = spreads\n  }\n\n  saddle_pages(num=1){\n    // get pages\n    let pages = this.pages()\n    if(!Array.isArray(pages)) return\n\n    let last = pages.length - 1\n    let pair = (i) => pages[last - i]\n\n    let middle = Math.ceil(last/2)\n\n    // switch each recto with pair spread recto till middle\n    for(let i = 0; i < middle; i++){\n      let f_recto = pages[i][1]\n      let p_recto = pair(i)[1]\n\n      pages[i][1] = p_recto\n      pair(i)[1] = f_recto\n    }\n    \n    // pair each pair and flatten\n    let pairs = []\n    \n    for(let i = 0; i <= middle; i++){\n      pairs.push(pages[i])\n      pairs.push(pair(i))\n    }\n\n    return pairs\n  }\n\n  page_to_spread(num){\n    return Math.floor(num/2)\n  }\n\n  get_page(num = 1){\n    let spread = this.page_to_spread(num)\n    return this.spreads[spread]\n  }\n\n  set_spread(spread){\n    let valid = this.validate_spread(spread)\n    if (!valid) return\n    this.current_spread = spread\n  }\n  \n  set_page(num){\n    let spread = this.page_to_spread(num)\n    this.set_spread(spread)\n  }\n\n  validate_spread(spread) {\n    if (this.spreads.length <= spread\n        || spread < 0\n       ) return false\n    else return true\n  }\n\n  pages(){\n    /**@type {[number, number][]}*/\n    let arr = []\n    let is_odd = (num) => (num % 2) == 1\n\n    // also make sure number of spreads is odd\n    // TOD0: if it isn't, add a spread before last page in booklet binding... \n    if (is_odd(this.spreads.length)){\n      this.spreads.forEach((_, i) => {\n        let last = i == this.spreads.length - 1\n        let first = i == 0\n        let num = i * 2\n        let recto = last ? 0 : num + 1\n        let verso = num\n        arr.push([verso, recto])\n      })\n\n      return arr\n    }\n    else{\n      console.log(\"FUCK NOT MULTIPLE OF 4\", (this.spreads.length * 2) - 2)\n    }\n  }\n  \n  /**@param {Spread} spread */\n  add_spread(spread){\n    this.spreads.push(spread)\n  }\n  \n  draw(p){\n    console.log(\"page\", this.current_spread)\n    if(this.grid) this.spreads[this.current_spread].draw_grid(p, this.pages()[this.current_spread])\n    this.spreads[this.current_spread].draw(p)\n  }\n  \n  page_image(p, number){\n    let spread = this.page_to_spread(number)\n    \n    if (number % 2 == 1) return this.recto_image(p, spread)\n    else return this.verso_image(p, spread)\n  }\n\n  /**\n  @typedef {p5.Image} Image\n  */\n  verso_image(p, number){\n    let _p = p.createGraphics(p.width, p.height)\n    if (this.grid) this.spreads[number].draw_grid(_p, [(number*2),(number*2)+1])\n    this.spreads[number].draw(_p)\n    let img = _p.get(0,0, _p.width/2, _p.height)\n\n    return img\n  }\n  \n  recto_image(p, number){\n    let _p = p.createGraphics(p.width, p.height)\n    if (this.grid) this.spreads[number].draw_grid(_p, [(number*2),(number*2)+1])\n    this.spreads[number].draw(_p)\n    let img = _p.get(_p.width/2, 0, _p.width/2, _p.height)\n    return img\n  }\n  \n\n  draw_saddle_view(p){\n    let saddle = this.saddle_pages()\n    if (!saddle) return\n\n    let curr = saddle[this.current_spread]\n    this.draw_page_set(p, curr[0], curr[1])\n  }\n\n  /**\n  @param {Image} img  \n  */\n  draw_img(p, img, x=0, y=0){\n    p.image(img, x, y, img.width, img.height)\n  }\n  \n  draw_verso(p){\n    let img = this.verso_image(p, this.current_spread)\n    this.draw_img(p, img)\n  }\n  \n  draw_recto(p){\n    let img = this.recto_image(p, this.current_spread)\n    this.draw_img(p, img, img.width)\n  }\n\n  draw_page_set(p, num1, num2){\n    this.draw_img(p, this.page_image(p, num1))\n    let recto = this.page_image(p, num2)\n    this.draw_img(p, recto, recto.width)\n  }\n  \n  seek(page){\n    this.set_page(page)\n  }\n  \n}\n\n",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "qzadb",
      "start": 16348,
      "drag_x": 4005.048871417606,
      "drag_y": 1996.6158101090905,
      "focused": false,
      "output": "const hyphenate = (text) => hyphenateSync(text, { hyphenChar: \"-\" })\nfunction clamp(num, min, max) {\n  return Math.min(Math.max(num, min), max);\n};\n\nlet x = 1\nlet animating = false\nlet add = (x, y) => x+y\nlet sub = (x, y) => x-y\n\nlet op = add\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 800,
      "drag_h": 210
    },
    {
      "type": "code",
      "id": "hwvr23",
      "active": false,
      "focus": false,
      "start": 16593,
      "drag_x": 1236.7640607299786,
      "drag_y": 2078.5223061946535,
      "drag_w": 880,
      "drag_h": 60,
      "focused": false,
      "output": "let t = `She tried to imagine the technology conferences she'd been to with the addition of the subtitling and translation and couldn't do it. Not conferences. Something else. A kids' toy? A tool for Starbucks-smashing anti-globalists, planning strategy before a WTO riot? She patted her pocket. Freddy hissed and bubbled like a teakettle beside her, fuming. \"What a cock,\" he muttered. \"Thinks he's going to hire ten thousand teams to replace his workforce, doesn't say a word about what *that* lot is meant to be doing now he's shitcanned them all. Utter bullshit. Irrational exuberance gone berserk.\" Suzanne had a perverse impulse to turn the wand back on and splash Freddy's bilious words across the ceiling, and the thought made her giggle. She suppressed it and kept on piling up notes, thinking about the structure of the story she'd file that day. Kettlewell pulled out some charts and another surfer in a suit came forward to talk money, walking them through the financials. She'd read them already and decided that they were a pretty credible bit of fiction, so she let her mind wander. She was a hundred miles away when the ballroom doors burst open and the unionized laborers of the former Kodak and the former Duracell poured in on them, tossing literature into the air so that it snowed angry leaflets. They had a big drum and a bugle, and they shook tambourines. The hotel rent-a-cops occasionally darted forward and grabbed a protestor by the arm, but her colleagues would immediately swarm them and pry her loose and drag her back into the body of the demonstration. Freddy grinned and shouted something at Kettlewell, but it was lost in the din. The journalists took a lot of pictures. Suzanne closed her computer's lid and snatched a leaflet out of the air. WHAT ABOUT US? it began, and talked about the workers who'd been at Kodak and Duracell for twenty, thirty, even forty years, who had been conspicuously absent from Kettlewell's stated plans to date. She twisted the laser-pointer to life and pointed it back at the wall. Leaning in very close, she said, \"What are your plans for your existing workforce, Mr Kettlewell?\" WHAT ARE YOUR PLANS FOR YOUR EXISTING WORKFORCE MR KETTLEWELL She repeated the question several times, refreshing the text so that it scrolled like a stock ticker across that upholstered wall, an illuminated focus that gradually drew all the attention in the room. The protestors saw it and began to laugh, then they read it aloud in ragged unison, until it became a chant: WHAT ARE YOUR PLANS -- *thump* of the big drum -- FOR YOUR EXISTING WORKFORCE *thump* MR *thump* KETTLEWELL? Suzanne felt her cheeks warm. Kettlewell was looking at her with something like a smile. She liked him, but that was a personal thing and this was a truth thing. She was a little embarrassed that she had let him finish his spiel without calling him on that obvious question. She felt tricked, somehow. Well, she was making up for it now. On the stage, the surfer-boys in suits were confabbing, holding their thumbs over their tie-mics. Finally, Kettlewell stepped up and held up his own laser-pointer, painting another rectangle of light beside Suzanne's. \"I'm glad you asked that, Suzanne,\" he said, his voice barely audible. I'M GLAD YOU ASKED THAT SUZANNE The journalists chuckled. Even the chanters laughed a little. They quieted down. \"I'll tell you, there's a downside to living in this age of wonders: we are moving too fast and outstripping the ability of our institutions to keep pace with the changes in the world.\" Freddy leaned over her shoulder, blowing shit-breath in her ear. \"Translation: you're ass-fucked, the lot of you.\" TRANSLATION YOUR ASS FUCKED THE LOT OF YOU Suzanne yelped as the words appeared on the wall and reflexively swung the pointer around, painting them on the ceiling, the opposite wall, and then, finally, in miniature, on her computer's lid. She twisted the pointer off. Freddy had the decency to look slightly embarrassed and he slunk away to the very end of the row of seats, scooting from chair to chair on his narrow butt. On stage, Kettlewell was pretending very hard that he hadn't seen the profanity, and that he couldn't hear the jeering from the protestors now, even though it had grown so loud that he could no longer be heard over it. He kept on talking, and the words scrolled over the far wall. THERE IS NO WORLD IN WHICH KODAK AND DURACELL GO ON MAKING FILM AND BATTERIES THE COMPANIES HAVE MONEY IN THE BANK BUT IT HEMORRHAGES OUT THE DOOR EVERY DAY WE ARE MAKING THINGS THAT NO ONE WANTS TO BUY THIS PLAN INCLUDES A GENEROUS SEVERANCE FOR THOSE STAFFERS WORKING IN THE PARTS OF THE BUSINESS THAT WILL CLOSE DOWN `\n\n",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "ab6ag7",
      "active": false,
      "start": 21292,
      "drag_x": 1394.321303152193,
      "drag_y": 2463.738169242879,
      "drag_w": 600,
      "drag_h": 940,
      "focused": false,
      "output": "/**@type {p5}*/\nlet p\nlet oracle\n\nlet dpi = 150 \nlet viewport = 1\nlet s = new Scale(dpi,viewport)\nlet mx = 0, my = 0\n\nlet grid = new Grid({\n  margin: {\n    top: s.em(8),\n    bottom: s.em(4),\n    inside: s.em(1),\n    outside: s.em(4),\n  },\n\n  columns: 8,\n  gutter: s.point(6),\n  hanglines: [],\n  page_width: s.inch(11),\n  page_height: s.inch(8.5),\n}, s)\n\nlet preload = (p) => {\n  oracle = p.loadFont(\"/fs/fonts/ABCOracle.ttf\")\n}\n\nlet draw = (p) => {\n    p.background(\"white\");\n    p.textWeight(600)\n    p.textFont(oracle)\n\n  \n   mx = s.px(p.mouseX).px / viewport\n   my = s.px(p.mouseY).px / viewport\n  \n    p.rect(mx, my,10,10)\n\n    book.draw(p)\n    //book.draw_page_set(p, 1,9)\n    //book.draw_saddle_view(p)\n    //book.draw_recto(p)\n    // book.seek(0)\n    //book.draw_recto(p)\n    p.noLoop()\n}\n\nsetTimeout(() => {\n  let el = document.querySelector(\".q5\")\n  p = new p5('instance', el);\n\n  p.setup = () => {\n    p.createCanvas(s.inch(11).px, s.inch(8.5).px);\n    el.style.transform = \"scale(\"+(1/s.scale)*viewport+\")\"\n  };\n\n  \n  p.draw = () => {\n    draw(p)\n    //p.noLoop()\n  };\n\n  // p.mousePressed = () => {\n  //   p.save(\"print.png\")\n  // }\n  \n}, 200)\n\n\n",
      "cursor": 0,
      "focus": false
    },
    {
      "type": "code",
      "id": "l5qljd",
      "start": 22450,
      "drag_x": 2079.2827973164467,
      "drag_y": 2746.9379420904133,
      "drag_w": 600,
      "drag_h": 360,
      "focused": false,
      "output": "const defer = (fn, t = 200) =>  setTimeout(fn, t)\nlet data\nlet pg = 1\n\n\nfetch(\"http://localhost:3000/api/channels/isp-book-final\")\n  .then((res) => res.json())\n  .then((res) => data = res)\n\n\nlet container = () => html`\n<style>\n  ${GlobalStyle}\n</style>\n\n<div class=\"container\">\n  <div class=\"q5\"></div>\n  \n  <button \n  style=\"position:fixed;top:1em;left:0\"\n  onclick=${() => {pg--;book.seek(pg);book.draw(p)}} >\n    prev\n  </button>\n  <button \n  style=\"position:fixed;top:0;left:0\"\n  onclick=${() => {pg++;book.seek(pg)}} >\n    next\n  </button>\n</div>\n`\nrender(container, document.body)\n\n",
      "cursor": 0,
      "active": false,
      "focus": false
    },
    {
      "type": "code",
      "id": "t5dwtp",
      "active": false,
      "focus": false,
      "start": 23038,
      "drag_x": 2777.8393135157726,
      "drag_y": 2733.6514192590917,
      "drag_w": 1088.3348404050394,
      "drag_h": 739.1214169479445,
      "focused": false,
      "output": "/**@type {{\n  body: ParagraphProps\n  title: ParagraphProps\n}}*/\nlet stylesheet = {\n  title: {\n    text: \"\",\n    font_family: \"ABC Maxi Round Unlicensed Trial\",\n    font_weight: 300,\n    length: (grid) => grid.column_width(6),\n    font_size: s.point(38),\n    leading: s.point(22),\n    \n  },\n  body: {\n    text : \"\",\n    leading: s.point(12),\n    length: (grid) => grid.column_width(5),\n    height: s.em(8),\n    font_size: s.point(8),\n    font_family: \"ABC Oracle Variable Unlicensed Trial\",\n    font_weight: 600,\n  }\n}\n\n\n",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "tr577c",
      "active": false,
      "start": 23558,
      "drag_x": 3921,
      "drag_y": 2732.3054580244775,
      "drag_w": 600,
      "drag_h": 743.3682253450821,
      "focused": false,
      "output": "\n",
      "cursor": 0,
      "focus": false
    },
    {
      "type": "code",
      "id": "ef2ep",
      "active": false,
      "focus": false,
      "start": 23559,
      "drag_x": 4544.803274511988,
      "drag_y": 2736.6987486074763,
      "drag_w": 600,
      "drag_h": 400,
      "focused": false,
      "output": "\nfunction spread_from_block(index, extensions = []){\n  let t_index = index \n  let throuth_title = new LinkedFrame(\"\")\n  \n  throuth_title.add({\n    ...stylesheet.title,\n    text : \"\",\n    x: (grid) => grid.verso_columns()[3].x, \n    y: (grid) => \n      s.add(\n        grid.verso_columns()[0].y,\n        s.px_raw(grid.column_width(3).px)\n      ),\n    \n    height: s.em(12),\n    rect: false,\n  })\n  defer(() =>{\n    let d = data.contents[t_index]\n    if (!d) return\n    throuth_title.set_text(d.title)\n  } , 50)\n  \n  let through = new LinkedFrame(\"Hewl\")\n  through.add({\n    ...stylesheet.body,\n    text : \"\",\n    x: (grid) => grid.verso_columns()[1].x, \n    y: (grid) => s.add(grid.verso_columns()[0].y, s.em(4)),\n  })\n  \n  through.add({\n    ...stylesheet.body,\n    text : \"\",\n    x: (grid) => grid.recto_columns()[1].x, \n    y: (grid) => s.add(grid.recto_columns()[0].y, s.em(4)),\n    height: s.em(21)\n  })\n  \n  defer(() => {\n    let d = data.contents[t_index]\n    if (!d) return\n    through.set_text(d.content)\n  }, 50)\n  \n return new Spread(grid, s, [through, throuth_title, ...extensions])\n}\n\nlet graphic = () => {\n  let r = Math.random()*12\n  let f = Math.random()*28\n  let at = Math.random() + .5\n  let ot = Math.random()\n  return {\n  draw: (p, props) => {\n    p.noFill()\n    p.stroke(0,0,255)\n    \n    p.strokeWeight(1)\n    p.arc(s.em(18).px\n             ,s.em(f + r).px\n             ,s.em(r*2 + 8).px\n             ,s.em(r*2 + 8).px\n             ,ot\n             ,at\n            )\n    \n    p.strokeWeight(.5)\n    p.circle(s.em(8).px,\n             s.em(18).px,\n             s.em(r*at).px,\n            )\n  }\n}}\n\n",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "zjnw67",
      "active": false,
      "focus": false,
      "start": 25174,
      "drag_x": 5229.21816380136,
      "drag_y": 2790.772039587739,
      "drag_w": 456.6778783242793,
      "drag_h": 1076.1734654180966,
      "focused": false,
      "output": "let pages = [\n   spread_from_block(0, [graphic()]),\n   spread_from_block(1, [graphic()]),\n   spread_from_block(2, [graphic()]),\n   spread_from_block(3, [graphic()]),\n   spread_from_block(4, [graphic()]),\n   spread_from_block(5, [graphic()]),\n   spread_from_block(6, [graphic()]),\n   spread_from_block(7, [graphic()]),\n]\n\nlet Header = (text, para) => {\n  /**@type {Drawable}*/\n  let ret = { draw: (p, props) => draw_paragraph(p, {\n    font_family: \"hermit\",\n    text: text,\n    ...para\n  }, props.structure) }\n  return ret\n}\n\nlet header_opts = (i) => {\n  return {\n    x: (grid) => grid.verso_columns()[0].x,\n    y: (grid) => s.add(grid.verso_columns()[2].y, s.em(i*8)),\n    length: s.em(22),\n    leading: s.point(19),\n    font_size: s.point(17),\n    height: s.em(28),\n    rect: false,\n    hyphenate: false\n  }\n}\nlet book\n\ndefer(() => {\n  \n book = new Book( [\n  new Spread(grid, s, \n             Array(5)\n             .fill(0)\n             .map((e, i) =>  Header(data.contents[i].title, header_opts(i)) ))\n], {\n    draw_grid: true\n  })\n\n\nbook.set_page(1)\n  \n}, 50)\n//book.set_page()\n\n",
      "cursor": 803
    },
    {
      "type": "video-component",
      "id": "z9me7s",
      "active": false,
      "focus": false,
      "start": 26256,
      "drag_x": 8810.605752131607,
      "drag_y": 3574.5924625253556,
      "drag_w": 750.8470028338807,
      "drag_h": 1097.6673881066984,
      "src": "/fs/media/switch_sped_up.mp4",
      "output": ""
    },
    {
      "type": "video-component",
      "id": "im0wm9",
      "active": false,
      "focus": false,
      "start": 26256,
      "drag_x": 9538.555564158676,
      "drag_y": 2433.3648684189484,
      "drag_w": 715.4084680624484,
      "drag_h": 1092.4508083746896,
      "src": "/fs/media/saddle_sped_up.mp4",
      "output": ""
    },
    {
      "type": "video-component",
      "id": "235qr",
      "active": false,
      "focus": false,
      "start": 26256,
      "drag_x": 8829.040394823116,
      "drag_y": 2423.0250939864654,
      "drag_w": 600,
      "drag_h": 1066.8044821385902,
      "src": "/fs/media/shuffle_sped_up.mp4",
      "output": ""
    },
    {
      "type": "video-component",
      "id": "o7q9z9",
      "active": false,
      "focus": false,
      "start": 26256,
      "drag_x": 5958.478468899521,
      "drag_y": 1091.354066985647,
      "drag_w": 1665.2172414932327,
      "drag_h": 906.0757963255529,
      "src": "/fs/media/rectless_type.mp4",
      "output": ""
    },
    {
      "type": "video-component",
      "id": "0vkkd2",
      "active": false,
      "focus": false,
      "start": 26256,
      "drag_x": 7550.612440191385,
      "drag_y": 1093.315789473681,
      "drag_w": 1450.6523743954374,
      "drag_h": 963.8575130207687,
      "src": "/fs/media/ground_up.mp4",
      "output": ""
    }
  ],
  "output": "",
  "properties": {
    "panzoom": {
      "initialX": -16.291317148641355,
      "initialY": -46.026100651543516,
      "initialZoom": 1
    },
    "buffer": [
      20,
      12,
      18,
      16,
      15
    ]
  }
}