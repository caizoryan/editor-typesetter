{
  "blocks": [
    {
      "type": "load-component",
      "id": "0otrjh",
      "start": 0,
      "path": "",
      "output": "",
      "active": false,
      "focus": false,
      "drag_x": 1289.0682106508261,
      "drag_y": 1667.7271284340552,
      "drag_w": 600,
      "drag_h": 60,
      "panzoom": {
        "initialX": -1793.4292293047931,
        "initialY": -459.65704398951334,
        "initialZoom": 1
      }
    },
    {
      "type": "save-component",
      "id": "d2db1m",
      "start": 0,
      "path": "test/fileviewer.json",
      "output": "",
      "active": false,
      "focus": false,
      "drag_x": 652.867674233665,
      "drag_y": 1663.8403610106884,
      "drag_w": 600,
      "drag_h": 90,
      "autosave": true
    },
    {
      "type": "editor_sizer",
      "id": "q05bgb",
      "start": 0,
      "drag_x": 8.185538762772254,
      "drag_y": 1657.9808778476524,
      "size": "100",
      "output": "",
      "active": false,
      "drag_w": 600,
      "drag_h": 80,
      "focus": false
    },
    {
      "type": "code",
      "id": "1xu0na",
      "start": 0,
      "drag_x": 937.7964651626878,
      "drag_y": 547.4847555857533,
      "drag_w": 600,
      "drag_h": 80,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false
    },
    {
      "type": "code",
      "id": "etck6",
      "start": 37,
      "drag_x": 730.9795361239924,
      "drag_y": 395.4303232400781,
      "drag_w": 600,
      "drag_h": 80,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false
    },
    {
      "type": "code",
      "id": "ab6ag7",
      "active": false,
      "start": 74,
      "drag_x": 558.5862470237192,
      "drag_y": 260.4608120685707,
      "drag_w": 600,
      "drag_h": 80,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "focus": false
    },
    {
      "type": "code",
      "id": "l5qljd",
      "start": 111,
      "drag_x": 357.2980669929282,
      "drag_y": 154.5050814714155,
      "drag_w": 600,
      "drag_h": 80,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false
    },
    {
      "type": "md",
      "id": "nqch8",
      "start": 144,
      "drag_x": 1815,
      "drag_y": 114,
      "drag_w": 600,
      "drag_h": 380,
      "md": "# if I save something\n\nwhat the fuck happened to all the shit I wrote and fucking saved.\n\n==MARKDOWN WORKS BITCHES==\n\nthis works very well now.\n\nsomething something\n\n",
      "output": "",
      "active": false,
      "focus": false
    },
    {
      "type": "sandbox",
      "id": "uircos",
      "active": true,
      "focus": true,
      "start": 144,
      "drag_x": 1893.860465881361,
      "drag_y": 559.9496430586348,
      "drag_w": 600,
      "drag_h": 990,
      "output": "",
      "focused": false,
      "renderer": "function(state) {\n  let JsonViewer\n  import(\"/js/snippet/JsonViewer.json\").then((res) => {\n    JsonViewer = res\n  })\n\n  // state to be passed and to be used as needed\n  let text = sig(\"Hello world\")\n  let dir_exist = sig(false)\n  let dirs = sig([])\n  let button = () => {\n    let x = sig(2)\n    \n    return h(\"button\", {\n      style: `\n        padding: 2em;\n        margin: 1em;\n        margin-left: 0;\n        background: grey;\n      `,\n      onclick: (e) => {\n        e.stopPropagation()\n        x.set(x() + 1)\n      }\n      \n    }, x)\n  }\n\n  let span_style = `\n    font-size: .5em;\n    color: #ff00aa88;\n    opacity: .5;\n  `\n\n  setTimeout(() => { refresh() }, 1500)\n\n  let refresh = () => {\n    if (m() && m().ass){\n      eff_on(m().ass, () => {\n        \n        text.set(m().ass())\n      })\n    }\n    if (m() && m().dir) {\n      eff_on(() => m().dir, () => {\n        dir_exist.set(true) \n        dirs.set([...m().dir.files, ...m().dir.dirs]) \n      })\n    }\n  }\n\n  let refresh_button = () => h(\"button\", {onclick: refresh}, \"refresh\")\n\n  let dir_elems =  mem(() => dirs()\n    .map((el) => {\n      let name = el\n      \n      return h(\"div\",\n        h(\"button\", { \n          onclick: () => {\n            m().path.set(m().path()+\"/\"+name);\n            refresh()\n          }\n        }, name)\n      )}\n    ))\n\n  let viewer = mem(() => {\n    if(dirs() && JsonViewer){\n      let viewer = new JsonViewer.JsonViewer(editor.state.model)\n      return viewer\n    } \n  }\n )\n\n editor.state.focus_on_pos(1642)\n\n  let another = mem(() => {\n    if(viewer()){\n      return viewer().render()\n    } \n  }\n )\n  \n  let css = mem(() => {\n    if(viewer()){ \n      let csss = viewer().css()\n      return csss}\n  }\n )\n  \n  return [\n    h(\"style\", css),\n    h(\"h1\", text, \n      h(\"span\", {style:span_style},  \n        mem(() => dir_exist() ?  \"(wink wonk)\": \"\"  ) \n       ),\n      refresh_button()\n     ),\n\n    dir_elems,\n    another\n    \n  ]\n}\n  ",
      "cursor": 23
    },
    {
      "type": "code",
      "id": "tma0w",
      "start": 144,
      "focused": false,
      "output": "import {eff_on, sig, mut, h} from \"/lib/solid/monke.js\"\n\n\n\nconst defer = (fn, t = 400) => setTimeout(fn, t)\nconst M = mut({})\ndocument.M = M\n\nM.ass = sig(\"funky\")\nM.path = sig(\"\")\n\neff_on(M.path,() => check_dir(M.path()))\nsetTimeout(() => M.ass.set(\"FICKITY\"), 2500)\n\nfunction load_path(path){\n  if (M) { if (M.EDITOR) M.EDITOR.state.load(path) }\n}\n\nfunction save_path(path){\n  if (M) { if (M.EDITOR) M.EDITOR.state.save(path) }\n}\n\nfunction show_dir(path, dir){\n  let path_split = path.split(\"/\")\n  let path_slice = path_split.slice(0, path_split.length - 2)\n  let back_path = path_slice.join(\"/\")\n  let title = path == \"\" ? \"\" : \"../\" + back_path\n  let back = p(title, () => check_dir(back_path))\n  \n\n  M.dir = dir\n  \n  let files = dir.files.map((f) => p(f, () => M.path.set(path+\"/\"+f)))\n  let dirs = dir.dirs.map((f) => dir_elem(f, () => M.path.set(path+\"/\"+f)))\n  \n  document.body.innerHTML = \"\"\n  document.body.appendChild(back)\n  dirs.forEach((f) => document.body.appendChild(f))\n  files.forEach((f) => document.body.appendChild(f))\n}\n\nfunction show_file(src) {\n  if (src.split(\".\").pop() == \"jpg\"){\n    document.body.innerHTML = `<img src=\"${src}\"></img>`\n  }\n  console.log(\"src\", src)\n}\n\nfunction dir_elem(text, onclick){\n  let style = {\n    \"font-family\": \"monospace\",\n    border: `1px solid black`,\n    color: \"black\",\n    padding: `10px`,\n    width: 'min-content',\n    \"min-width\": '300px',\n    cursor: \"pointer\"\n  }\n  \n  return  h(\"p\", {style, onclick}, text )()\n}\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_x": 2530.184154275901,
      "drag_y": 130.30696241003372,
      "drag_w": 600,
      "drag_h": 940
    },
    {
      "type": "code",
      "id": "qzadb",
      "start": 1623,
      "drag_x": 3182.9613263722613,
      "drag_y": 115.04089735703546,
      "focused": false,
      "output": "function p(text, onclick){\n  let style = {\n    \"font-family\": \"monospace\",\n    color: \"black\",\n    width: 'min-content',\n    \"min-width\": '300px',\n    cursor: \"pointer\",\n    opacity: .5,\n  }\n  return h(\"p\", {style, onclick}, text)()\n}\n\nfunction check_dir(path = \"\", root = \"/fs/\"){\n  fetch(root+path)\n    .then((res) => {\n      console.log(\"got res\")\n      try{ let r = res.json(); if(r) return r; else return null }\n      catch { return null }\n      return null\n    })\n    \n    .then((res) => {\n      console.log(res)\n      if (!res) console.log(\"failed\")\n      if (res.type == \"dir\") show_dir(path, res) \n      else show_file(root+path)\n    })\n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 24,
      "active": false,
      "focus": false,
      "drag_w": 800,
      "drag_h": 670
    },
    {
      "type": "load-component",
      "id": "6nfuj",
      "start": 2309,
      "drag_x": 65.32826980296615,
      "drag_y": 43.42805601006979,
      "drag_w": 270,
      "drag_h": 60,
      "path": "",
      "output": "",
      "active": false,
      "focus": false
    }
  ],
  "output": "",
  "properties": {
    "panzoom": {
      "initialX": -1285.388961461236,
      "initialY": -309.6117639833825,
      "initialZoom": 0.7315158843994141
    },
    "buffer": [
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  }
}