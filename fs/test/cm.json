{
  "blocks": [
    {
      "type": "code",
      "output": "import {mut} from \"/lib/solid/monke.js\"\n    \nconst BACKGROUND = \"#0D1117\"\nconst GROUPBG = \"#ff008888\"\nconst M = mut({});\ndocument.M = M;\nconst defer = (fn, t = 200) => setTimeout(fn, t)\n\n// -------------\n// Solid Imports\n// -------------\nimport {\n\tbatch,\n\teach,\n\teff_on,\n\th,\n  \tmem,\n\tmounted,\n\tproduce,\n\trender,\n\tsig,\n\tstore,\n} from \"/lib/solid/monke.js\";\n\nimport { MD } from \"/lib/md.js\"\nimport { Keymanager } from \"/lib/keymanager.js\";\nimport { createEnvironment } from \"/lib/ts/ts.js\";\nimport { drag } from \"/lib/drag.js\"\nimport { createPanZoom } from \"/lib/panzoom/panzoom.js\"\n\n// -------------\n// Codemirror Imports\n// -------------\nimport * as cm from \"/lib/codemirror/dist/src/cm.js\"\n\nconst { basicSetup, EditorView, Vim, vim} = cm\nconst { indentWithTab } = cm.commands\nconst { EditorState, StateField } = cm.state\nconst { keymap, showTooltip } = cm.view\nconst { toggleFold, foldAll,   HighlightStyle, syntaxHighlighting,  } = cm.language\nconst { javascript } = cm.lang_javascript\nconst { tags } = cm.lezer_higlight\nconst { lintGutter, linter, openLintPanel } = cm.lint\nconst { autocompletion, completeFromList } = cm.autocomplete\nlet t = tags\n\n// -------------\n// UTILITIES\n// -------------\nlet global_style =  `\n  html {\n    font-size: 14.5px;\n  }\n  \n  ::-webkit-scrollbar {display: none;}\n  @font-face {\n    font-family: 'DiatypeMono';\n    src: url('/fs/fonts/diatype_mono.ttf') format('truetype');\n    }\n  \n  * {\n    -ms-overflow-style: none;  /* IE and Edge */\n    scrollbar-width: none;  /* Firefox */\n    font-family: \"DiatypeMono\";\n  }\n\n  .child {\n    overflow-y: scroll;\n  }\n\n  input[type=\"text\"] {\n    all: unset;\n    border: 1px white solid;\n    background: black;\n  }\n  \n  button {\n    all: unset;\n    cursor: pointer;\n    padding: 2px;\n    font-size: .8em;\n    color: white;\n    background: black;\n    border: 1px white solid;\n  }\n  \n  iframe {\n    all: unset;\n  }\n  \n  body {\n    background:${BACKGROUND};\n    color: white;\n  }\n  \n  .group {\n    position: absolute;\n    top: 0;\n    left: 0;\n    background: ${GROUPBG};\n    width: 500vw;\n    height: 500vh;\n  }\n`\n\n// -------------\n// UTILITIES\n// -------------\n\nasync function post(url = \"\", body) {\n  try {\n  let f = await fetch(url, {\n    method: \"POST\",\n    headers: {\"Content-Type\": \"application/json\"},\n    body: JSON.stringify(body)\n  }).then((res) => res.json())\n  return f\n  }catch {\n  return null\n  }\n}\n\nconst uid = () => Math.random().toString(36).substring(7);\n\nconst throttle = (fn, delay) => {\n\tlet timerFlag = null;\n\treturn (...args) => {\n\t\tif (timerFlag === null) {\n\t\t\tfn(...args);\n\t\t\ttimerFlag = setTimeout(() => timerFlag = null, delay);\n\t\t}\n\t};\n}\n\nconst Root = () => {\n  mounted(() => {\n    let editor = make_code_mirror(\"test\", \"ass\")\n  })\n\treturn h(\"div\", [\n        h(\"style\", global_style),\n\t\th(\"div\", {id: \"ass\"}),\n\t]);\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "active": true,
      "focus": true,
      "start": 0,
      "focused": false,
      "cursor": 1199,
      "drag_x": 575.4717090737491,
      "drag_y": 921.0237709636734,
      "drag_w": 680,
      "drag_h": 190
    },
    {
      "type": "code",
      "id": "tmsrnv",
      "start": 2829,
      "drag_x": 1374.894759949555,
      "drag_y": 939.6154511263887,
      "focused": false,
      "output": "// ------------------------\n// CODEMIRROR ELEMENT\n// ------------------------\nfunction code_element(state, index, control) {\n\n\t// only used for syncing with tsserver\n\tconst live_code = sig(\"\")\n\tconst id = uid();\n\tlet save, focus, focus_on_pos;\n  \n\n\tVim.defineEx(\"cm\", \"cm\", (e) => console.log(e));\n  /*\n  // to make zc and zm for folds\n    Vim.defineAction(\"ArenaGoFile\", (cm) => {\n      console.log(\"ArenaGoFile\", cm);\n      \n      let [from, to] = [\n        view.state.selection.ranges[0].from,\n        view.state.selection.ranges[0].to,\n      ];\n      \n      let f = view.state.sliceDoc(from, to);\n      \n      if (link_is_block(f)) {\n        let block_id = extract_block_id(f);\n        window.location.href = host + \"/blocks/\" + block_id + offline;\n      }\n      console.log(from, to);\n      console.log(f);\n    });\n\n\n    Vim.mapCommand(\"gf\", \"action\", \"ArenaGoFile\", {}, { context: \"visual\" });\n  */\n\n\n\tconst render = () => {\n      mounted(() => {\n\n       const cursorTooltipBaseTheme = EditorView.baseTheme({\n        \".cm-tooltip.cm-tooltip-cursor\": {\n          backgroundColor: \"#66b\",\n          color: \"white\",\n          border: \"none\",\n          padding: \"2px 7px\",\n          borderRadius: \"4px\",\n          \"& .cm-tooltip-arrow:before\": {\n            borderTopColor: \"#66b\"\n          },\n          \"& .cm-tooltip-arrow:after\": {\n            borderTopColor: \"transparent\"\n          }\n        }\n      }) \n\n\n          let extensions = []\n\n          const cm_editor = make_code_mirror(code(), id, extensions);\n          focus = () => setTimeout(() => cm_editor.focus(), 100);\n\n          save = function(el) {\n              // TODO: add \"\\n\" only when not already added... \n              // TODO: Also mirro mechanism where else doc is accessed.\n              const text = cm_editor.state.doc.toString() + \"\\n\"\n              el.focused = cm_editor.hasFocus;\n              el.output = text;\n              el.cursor = cm_editor.state.selection.ranges[0].from;\n          };\n\n        focus_on_pos = (pos) => {\n          let start = state.start ? state.start : 0\n          \n          cm_editor.dispatch({\n            selection:  {anchor: pos - start , head: pos - start }, \n            scrollIntoView: true \n          })\n          \n          focus()\n        }\n          defer(function() {\n              if (state.cursor && state.focused) {\n                  const selection = { anchor: state.cursor, head: state.cursor };\n                  cm_editor.focus();\n                  cm_editor.dispatch({ selection });\n              }\n          });\n      });\n      return h(\"div\", { class: \"editor-\" + id });\n\t};\n\n\t// TODO: COMPONENT: template object representation\n\t// should have icons for things and have intellisense...\n\treturn ({\n      render: render,\n      onfocus: () => focus(),\n      write: (...args) => save(...args),\n      focus_on_pos: (pos) => focus_on_pos(pos)\n\t});\n}\n\n// ------------------------\n// CODEMIRROR UTILS\n// ------------------------\nfunction make_code_mirror(source, id, extensions) {\n\tconst element = document.getElementById(id);\n\tconst state = {\n\t\tdoc: source,\n\t\textensions: [\n\t\t\tjavascript(),\n          \n\t\t\tbasicSetup,\n\t\t\ttheme,\n          \n            vim(),\n\t\t\tkeymap.of([\n                indentWithTab,\n                {\n                  key: \"Mod-e\",\n                  run: () => toggleFold(editor)\n                },\n                {\n                  key: \"Mod-shift-e\",\n                  run: () => foldAll(editor)\n                },\n\t\t\t]),\n\t\t],\n\t};\n\n\tconst editor = new EditorView({\n\t\tparent: element,\n\t\tstate: EditorState.create(state),\n\t});\n\n\treturn editor;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 3099,
      "active": false,
      "drag_w": 680,
      "drag_h": 180,
      "focus": false
    },
    {
      "type": "code",
      "id": "p313n",
      "start": 6449,
      "focused": false,
      "output": "\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_x": 2083.37853465412,
      "drag_y": 1078.0363564423928,
      "drag_w": 600,
      "drag_h": 190
    },
    {
      "type": "code",
      "id": "t0gxe9",
      "start": 6452,
      "focused": false,
      "output": "\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_x": 2698.700126253044,
      "drag_y": 959.8249684367402,
      "drag_w": 830,
      "drag_h": 200
    },
    {
      "type": "code",
      "id": "geuvga",
      "start": 6455,
      "focused": false,
      "output": "\nconst createTheme = ({ variant, settings, styles }) => {\n\tconst theme = EditorView.theme(\n\t\t{\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t\t\"&\": {\n\t\t\t\tbackgroundColor: settings.background,\n\t\t\t\tcolor: settings.foreground,\n\t\t\t},\n\t\t\t\".cm-editor.cm-focused\": {\n\t\t\t\toutline: \"none\",\n\t\t\t},\n\t\t\t\".cm-content\": {\n\t\t\t\tcaretColor: settings.caret,\n\t\t\t},\n\t\t\t\".cm-cursor, .cm-dropCursor\": {\n\t\t\t\tborderLeft: \"2px solid\" + settings.caret,\n\t\t\t},\n\t\t\t\"&.cm-focused .cm-selectionBackgroundm .cm-selectionBackground, .cm-content ::selection\":\n\t\t\t{\n\t\t\t\tbackgroundColor: settings.selection,\n\t\t\t},\n\t\t\t\".cm-activeLine\": {\n\t\t\t\tbackgroundColor: settings.lineHighlight,\n\t\t\t},\n\t\t\t\".cm-gutters\": {\n\t\t\t\tbackgroundColor: settings.gutterBackground,\n\t\t\t\tcolor: settings.gutterForeground,\n\t\t\t},\n            \"&.cm-focused .cm-fat-cursor\": {\n              background: settings.caret,\n              \n            },\n\t\t\t\".cm-activeLineGutter\": {\n\t\t\t\tbackgroundColor: settings.lineHighlight,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdark: variant === \"dark\",\n\t\t},\n\t);\n\n\tconst highlightStyle = HighlightStyle.define(styles);\n\tconst extension = [theme, syntaxHighlighting(highlightStyle)];\n\n\treturn extension;\n};\n\nconst theme = createTheme({\n\tvariant: \"dark\",\n\tsettings: {\n\t\tbackground: BACKGROUND,\n\t\tforeground: \"white\",\n\t\tcaret: \"brown\",\n\t\tselection: \"#ffffff26\",\n\t\tgutterBackground: \"#fcfcfc22\",\n\t\tgutterForeground: \"#8a919922\",\n\t\tlineHighlight: \"#8a919922\",\n\t},\n\tstyles: [\n\t\t{\n\t\t\ttag: t.comment,\n\t\t\tcolor: \"#ffffff66\",\n\t\t},\n\t\t{\n\t\t\ttag: t.string,\n\t\t\tcolor: \"#A5D6FE\",\n\t\t},\n\t\t{\n\t\t\ttag: t.regexp,\n\t\t\tcolor: \"#4cbf99\",\n\t\t},\n\t\t{\n\t\t\ttag: [t.number, t.bool, t.null],\n\t\t\tcolor: \"#A5D6FE\",\n\t\t},\n\t\t{\n\t\t\ttag: t.variableName,\n\t\t\tcolor: \"white\",\n\t\t},\n\t\t{\n\t\t\ttag: [t.definitionKeyword, t.modifier],\n\t\t\tcolor: \"#FF7B72\",\n\t\t},\n\t\t{\n\t\t\ttag: [t.keyword, t.special(t.brace)],\n\t\t\tcolor: \"#FF7B72\",\n\t\t},\n\t\t{\n\t\t\ttag: t.operator,\n\t\t\tcolor: \"#77BDFA\",\n\t\t},\n\t\t{\n          tag: t.separator,\n          color: \"white\",\n\t\t},\n\t\t{\n          tag: t.punctuation,\n          color: \"white\"\n\t\t},\n\t\t{\n          tag: [t.definition(t.propertyName), t.function(t.variableName)],\n          color: \"white\",\n\t\t},\n\t\t{\n\t\t\ttag: [t.className, t.definition(t.typeName)],\n\t\t\tcolor: \"Orange\",\n\t\t},\n\t\t{\n\t\t\ttag: [t.tagName, t.typeName, t.self, t.labelName],\n\t\t\tcolor: \"white\",\n\t\t},\n\t\t{\n\t\t\ttag: t.angleBracket,\n\t\t\tcolor: \"#55b4d480\",\n\t\t},\n\t\t{\n\t\t\ttag: t.attributeName,\n\t\t\tcolor: \"#F66BAC\",\n\t\t},\n\t],\n});\n\nrender(Root, document.body);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_x": 2719.1150678069503,
      "drag_y": 2049.3391204779095,
      "drag_w": 600,
      "drag_h": 410
    },
    {
      "type": "load-component",
      "id": "40oxq5",
      "start": 8953,
      "path": "",
      "output": "",
      "active": false,
      "focus": false,
      "drag_x": 4687.589809285585,
      "drag_y": 1068.088874593948,
      "drag_w": 600,
      "drag_h": 80
    },
    {
      "type": "save-component",
      "id": "zri8um",
      "start": 8953,
      "path": "test/cm.json",
      "output": "",
      "active": false,
      "focus": false,
      "drag_x": 4040.6949145392996,
      "drag_y": 1060.4468324924678,
      "drag_w": 600,
      "drag_h": 80,
      "autosave": true
    },
    {
      "type": "editor_sizer",
      "id": "mkyf1t",
      "start": 8953,
      "drag_x": 208.9250218246754,
      "drag_y": 2428.0180997889806,
      "size": "100",
      "output": "",
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 80
    },
    {
      "type": "editor_sizer",
      "id": "t0njv5",
      "start": 8953,
      "size": "51",
      "output": "",
      "active": false,
      "focus": false,
      "drag_x": 838.3933699152169,
      "drag_y": 2427.516525729477,
      "drag_w": 600,
      "drag_h": 80
    },
    {
      "type": "load-component",
      "id": "j5nwde",
      "start": 8953,
      "drag_x": 606.0309621923058,
      "drag_y": 208.4858579717976,
      "path": "",
      "output": "",
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 80
    },
    {
      "type": "group",
      "id": "myqjrf",
      "start": 8953,
      "drag_x": 93.69716716902735,
      "drag_y": 38.75439942523799,
      "drag_w": 600,
      "drag_h": 80,
      "output": "",
      "blocks": [],
      "active": false,
      "focus": false
    },
    {
      "type": "md",
      "id": "oyhype",
      "start": 8953,
      "drag_x": 1415.4351190874447,
      "drag_y": 92.50396958151873,
      "drag_w": 570,
      "drag_h": 140,
      "md": "# Things to implement\n\n### Priorities\n- ~~onclick make active~~\n- ~~autosave figure out how you can do this~~\n- rename widgets to comp\n- ~~add-comp at cursor~~\n- ~~calculate comp position based on~~\n- telescope\n\n### Next on\n- Mode switch from canvas to linear....\n- ~~revisit groups~~\n- panzoom keyboard based navigation \n- Component live output\n- component templates\n- something like notion where you can do /select component\n\n",
      "output": "",
      "active": false,
      "focus": false
    }
  ],
  "output": ""
}