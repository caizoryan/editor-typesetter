{
  "blocks": [
    {
      "type": "code",
      "output": "import { mut,render, html, sig, mem, eff_on } from \"/lib/solid/monke.js\"\n\nlet M = mut({})\ndocument.M = M\n\n// Get the channel\nexport const auth = ''\nconst defer = (fn, t = 200) => setTimeout(fn, t)\n\ndefer(function() {\n  let E = M.EDITOR\n  // save this file\n  E.state.save(\"test/omama-feed.json\")\n})\n\n// let m_editor\n// function poll_editor(fn, interval = 150, count=0){\n//   if (count > 20) { console.error(\"FUCKKKKKK\"); return }\n//   defer(function() {\n//     let E = M.EDITOR\n//     console.log('polled:',E)\n// \tif (!E) poll_editor(fn, interval, count + 1)\n//     else {\n//       m_editor = E;\n//       console.log('editor at: ', count, m_editor);\n//       fn()\n//    }\n//   }, interval)\n// }\n\n// poll_editor(function() {\n//   m_editor.positioner.w.set(100)\n//   m_editor.iframe_pos.w.set(100)\n//   m_editor.iframe_pos.x.set(0)\n// })\n\n\n\nlet options = {\n\theaders: {\n\t\tAuthorization: \"Bearer \" + auth,\n\t}\n}\nlet channel\n\nasync function init() {\n channel = await fetch(\"https://api.are.na/v2/channels/acha-acha-twxwkjoba9s?per=100\", options)\n  .then( (response) => response.json() );\n  \n  console.log(\"title\", channel.title)\n  \n  let html_str=\"\"\n  let css  = `\n  <style>\n    body {\n      font-family: monospace;\n      display: grid;\n      grid-template-columns: repeat( auto-fit, minmax(350px, 1fr) );\n    }\n    \n    h2 {\n      font-size: 1.8em;\n      border-bottom: 1px solid #ddd;\n      padding-bottom: 5px;\n      color: #ddd;\n    }\n    \n    .block {\n      overflow: hidden;\n      padding: 10px;\n      width: 300px;\n      border: 1px solid #eee;\n      margin: 10px;\n      display: flex;\n      flex-direction: column;\n      align-item: center;\n      justify-content: center;\n    }\n  `\n  \n  let title = (block) => \"<h2>\" + block.title + \"</h2>\"\n  let image = (block) => `<img src=\"${block.image?.display?.url}\"></img>`\n  let content = (block) => block.content_html\n  let animate = (i) => `\n    .block_${i+1} {\n      animation: animate_${i+1} ${(i+1)/10}s infinite;\n    }\n\n    @keyframes animate_${i+1} {\n      0% {opacity: 0;}\n      50% {opacity: 1;}\n      100% {opacity: 0;}\n    }\n  `\n  \n  channel.contents.forEach((block, i) => {\n    html_str += `<div class=\"block block_${i}\">`\n    \n    if (block.class == \"Attachment\" \n        || block.class == \"Link\" \n        || block.class == \"Image\"){\n      \n      html_str += title(block)\n      html_str += image(block)\n    }\n      \n    else if (block.class == \"Text\") {\n      html_str += title(block)\n      html_str += content(block)\n    }\n    \n    html_str += \"</div>\"\n  })\n\n  css+=\" </style> \"\n\n  return css+html_str\n}\n\ninit().then((res) => document.body.innerHTML = res)\n\n\n\n\n\n",
      "start": 0,
      "focused": false,
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_x": 1738.8057235271276,
      "drag_y": 220.9191927024944,
      "drag_w": 600,
      "drag_h": 630
    },
    {
      "type": "sandbox",
      "id": "n0zre4",
      "active": true,
      "focus": true,
      "start": 2619,
      "drag_x": 2388.8057235271276,
      "drag_y": 220.9191927024944,
      "drag_w": 600,
      "drag_h": 650,
      "output": "",
      "focused": false,
      "renderer": "function (state) {\n  // ----------------------------------\n  // Are.na channel saver\n  // ----------------------------------\n    \n  // this one will be to load are.na data into a folder in fs\n  // /fs/arena-data/blog-feed.json\n  \n  // TODO: Make a jsdoc are.na library\n  // with utils like hack-refresh, get >100 per, \n\n\n  const ARENA_HOST = \"http://localhost:3000/api/\"\n  const SLUG = \"blog-feed\"\n  let render = sig(() => h(\"p\", \"...loading\"))\n  let css = sig(\"\")\n  const render_json = (json) => {\n    import(\"/js/snippet/JsonViewer.json\")\n      .then((j) => {\n        \n        let jj = new j.JsonViewer(json)\n        render.set(jj.render.bind(jj))\n        css.set(jj.css())\n      })\n\n    return render\n  }\n  const get_channel = (slug) => {\n    fetch(ARENA_HOST+\"channels/\"+slug)\n      .then((res) => res.json())\n      .then((res) => {\n        render_json(res)\n      })\n  }\n\n  get_channel(SLUG)\n  \n\n  let style = mem(() => `\n    background: white;\n  `)\n\n  \n  \n  return h(\"div\", {style: style},render)  \n}",
      "cursor": 658
    },
    {
      "type": "code",
      "id": "lh1luw",
      "start": 2619,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_x": 68.82033663245046,
      "drag_y": 595.5606054731293,
      "drag_w": 600,
      "drag_h": 80
    },
    {
      "type": "save-component",
      "id": "rzt5q",
      "start": 2628,
      "path": "test/a-p-feed.json",
      "output": "",
      "active": false,
      "focus": false,
      "drag_x": 941.213230415707,
      "drag_y": 527.3014331870893,
      "drag_w": 600,
      "drag_h": 80,
      "autosave": true
    }
  ],
  "output": ""
}