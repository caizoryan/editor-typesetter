{
  "blocks": [
    {
      "type": "load-component",
      "id": "ctkln",
      "start": 0,
      "drag_x": 35.95947368653305,
      "drag_y": 94.0131578366737,
      "path": "",
      "output": "",
      "active": false,
      "focus": false,
      "drag_w": 300,
      "drag_h": 50
    },
    {
      "type": "save-component",
      "id": "zp9lli",
      "start": 0,
      "drag_x": 31.94382665983347,
      "drag_y": 191.95004593369575,
      "path": "test/anisha-thesis.json",
      "output": "",
      "active": false,
      "focus": false,
      "drag_w": 450,
      "drag_h": 60,
      "autosave": true
    },
    {
      "type": "md",
      "id": "shx5x",
      "active": false,
      "focus": false,
      "start": 0,
      "drag_x": 353.7752221511353,
      "drag_y": 498.31209751886513,
      "drag_w": 600,
      "drag_h": 400,
      "md": "## Setup\n- ~~Load video files~~\n- Make a video manager (manage the plane, play, etc)\n\n## Transition\n- Decision buttons\n- transition animation or whatever",
      "output": ""
    },
    {
      "type": "code",
      "output": "import {mounted,mem,mut, eff_on, render, sig, h} from \"/lib/solid/monke.js\"\nimport { THREE, addons } from \"/lib/threejs/three.js\"\nimport {Keymanager} from \"/lib/keymanager.js\"\n\nconst M = mut({\n  fn: {},\n  eff_on: [],\n  off: {\n    x: 0,\n    y: -10,\n    z: -.1,\n  }\n})\n\ndocument.M = M\n\n// basic styling\nlet style = document.createElement(\"style\")\nstyle.innerText= `*{padding: 0;margin:0}`\ndocument.head.appendChild(style)\n\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera( 85, window.innerWidth / window.innerHeight, 0.1, 1000 );\nconst orbit = addons.OrbitControls\nconst loader = new THREE.TextureLoader()\nconst renderer = new THREE.WebGLRenderer();\n\nfunction initTHREE(){\n  renderer.setSize( window.innerWidth, window.innerHeight );\n  document.querySelector(\"#THREE\")?.appendChild( renderer.domElement );\n  animate()\n}\n\n\nfunction apply_offset(){ }\n\nlet c = new orbit(camera, renderer.domElement)\ncamera.position.z = 5;\nc.update()\n\nlet keys = new Keymanager()\nkeys.on(\"ArrowUp\", () => camera.position.z -= 2)\nkeys.on(\"ArrowDown\", () => camera.position.z += 2)\n\nwindow.addEventListener(\"keydown\",(e) => keys.event(e))\n\nfunction animate() {\n  requestAnimationFrame(animate)\n  renderer.render( scene, camera );\n  c.update()\n}\n\nconst Root = () => {\n  mounted(initTHREE)\n  let style = `\n    all: unset;\n    color: white;\n    font-family: monospace;\n    border: 1px dotted #fff8;\n    padding: .5em;\n    position: fixed;\n    bottom: 2em;\n    left: 5em;\n  `\n  \n  let button = () => h(\"button\",{style}, \"Problem kya hai bhai\")\n  return h(\"div.main\", \n           h(\"div#THREE\"),\n           button\n          )\n}\n\nrender(Root, document.body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "start": 0,
      "drag_x": 1154.4967982744517,
      "drag_y": 461.70618422736453,
      "focused": false,
      "cursor": 1539,
      "active": true,
      "focus": true,
      "drag_w": 600,
      "drag_h": 1200
    },
    {
      "type": "code",
      "id": "he3gnn",
      "start": 1668,
      "drag_x": 1820.1371397277696,
      "drag_y": 670.9804086103186,
      "focused": false,
      "output": "\n/**\n@typedef {Object} vec3 \n@property {number} vec3.x\n@property {number} vec3.y\n@property {number} vec3.z\n\n@param {vec3} vec1\n@param {vec3} vec2\n*/\nfunction eq(vec1, vec2){\n  return vec1.x === vec2.x \n    && vec1.y == vec2.y\n    && vec1.z == vec2.z\n}\n\n\nfunction shuffle(arr) {\n  return arr.sort(() => Math.random() > .5 ? 1 : -1)\n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 730
    },
    {
      "type": "code",
      "id": "wcbpv2",
      "start": 2017,
      "drag_x": 2504.837874102368,
      "drag_y": 439.4254127578353,
      "focused": false,
      "output": "let video_path = \"/fs/media/anisha-thesis/video1.mp4\"\n\nlet viddy = document.createElement(\"video\")\nviddy.src = video_path\nlet f = create_video_plane(viddy)\nscene.add(f)\n\nviddy.loop = true\nviddy.play()\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 530
    },
    {
      "type": "code",
      "id": "v2a3aw",
      "start": 2225,
      "drag_x": 2917.01058745169,
      "drag_y": 1152.7170427596486,
      "focused": false,
      "output": "\n/**\n@typedef {object} Decision \n@property {string} message\n@property {number} next\n*/\n\n/**\n@typedef {object} SourceNode \n@property {string} src\n@property {Decision[]} options\n*/\n\n/**\n@type {SourceNode[]}\n*/\nlet decision_tree = [\n  // 0. Zero\n  {\n    src: \"video1.mp4\",\n    options: [ \n      { message: \"something...\", next: 1, }, \n    ]\n  },\n  \n  // 1. One\n  {\n    src: \"video2.mp4\",\n    options: [ \n      { message: \"get up and run\", next: 2, }, \n    ]\n  },\n\n  // 2. Two\n  {\n    src: \"video3.mp4\",\n    options: [ \n      { message: \"go back home\", next: 0, }, \n    ]\n  }\n]\n\nM.decision_tree = decision_tree\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 1200
    },
    {
      "type": "code",
      "id": "mf4rl",
      "start": 2842,
      "drag_x": 4393.437441085362,
      "drag_y": 2320.2884292730214,
      "focused": false,
      "output": "\n/**\n@description make sure video is loaded\n@param {HTMLVideoElement} video \n*/\nfunction create_video_plane(video){\n  // make a video element\n  // video will always be 4:3\n  // make plane that size\n  const texture = new THREE.VideoTexture(video)\n  \n  const geometry = new THREE.PlaneGeometry(8, 6)\n  \n  const material = new THREE.MeshBasicMaterial({\n    map: texture,\n    // opacity: .2,\n    // transparent: true,\n    // use texture of video\n  })\n  const plane = new THREE.Mesh(geometry, material);\n\n  return plane\n}\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 970
    },
    {
      "type": "sandbox",
      "id": "d53gsj",
      "active": false,
      "focus": false,
      "start": 3382,
      "drag_x": 4388.468109408692,
      "drag_y": 957,
      "drag_w": 600,
      "drag_h": 830,
      "output": "",
      "focused": false,
      "renderer": "function() {\n\n  let one_coords = mut({ x: 0, y: 0 })\n  let two_coords = mut({ x: 0, y: 0 })\n  \n  eff_on(() => one_coords.x, \n         () => {\n           if (m()) m().off.x = one_coords.x / 200\n         })\n  \n  eff_on(() => one_coords.y,\n         () => {\n           if (m()) m().off.z = (one_coords.y / 200) * -1\n         })\n  \n  let wi = 50, he=50\n  \n  let one_ref = (e) => one_ref = e\n  mounted (() => {\n      const set_left = (x) => one_coords.x = x\n      const set_top = (y) => one_coords.y = y\n      setTimeout(() => drag(one_ref,  {set_left, set_top} ), 200) \n  })\n\n  \n  let one = mem(() => `\n    position: absolute;\n    top: ${one_coords.y}px;\n    left: ${one_coords.x}px;\n    width: ${wi}px;\n    height: ${he}px;\n    background: #000;\n  `)\n  \n  \n  let parent = `\n    position: relative;\n    width: 400px;\n    height: 400px;\n  `\n  \n  return h(\"div\", {style: parent},  h(\"div\", {style: one, ref: one_ref}))\n}\n  ",
      "cursor": 0
    },
    {
      "type": "sandbox",
      "id": "jesx6",
      "active": false,
      "focus": false,
      "start": 3382,
      "drag_x": 5022.418389648743,
      "drag_y": 958.3539206058648,
      "drag_w": 890,
      "drag_h": 830,
      "output": "",
      "focused": false,
      "renderer": "function() {\n  console.log(\"dt\", m().decision_tree)\n  let parent = \"/fs/media/anisha-thesis/\"\n  let cur = sig(0)\n  let next=() => cur.set(cur() + 1)\n  let prev=() => cur.set(cur() - 1)\n  let src_on = (i) => parent+m().decision_tree[i]?.src\n  let cur_src = mem(() => src_on(cur()))\n  let cur_options = mem(() => m().decision_tree[cur()]?.options)\n  let video_style=` width:400px;  `\n  let video_smol = `width: 85px;`\n\n  const nuxt = (option) => h(\"div\",\n                             h(\"video\",\n                               {src: src_on(option.next), style: video_smol, controls: true}),\n                             h(\"p\", option.message)\n                            )\n  let split = `\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  `\n  return h(\"div\",\n           // next prev\n           h(\"div\", \n             h(\"button\", {onclick:prev}, \"prev\"),\n             h(\"span\", cur),\n             h(\"button\", {onclick:next}, \"next\"),\n            ),\n\n           // video\n           h(\"div\", {style: split},\n             h(\"video\", {src: cur_src, style:video_style, controls: true}),\n             mem(() => cur_options()?.map(nuxt))\n            )\n           \n          )\n}\n  ",
      "cursor": 0
    }
  ],
  "output": "",
  "properties": {
    "panzoom": {
      "initialX": -667.8348361492253,
      "initialY": -207.07239121880843,
      "initialZoom": 0.6650818242358675
    },
    "buffer": [
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  }
}