{
  "blocks": [
    {
      "type": "save-component",
      "id": "ntiecf",
      "start": 0,
      "drag_x": 56.42465753424656,
      "drag_y": 36.493150684931535,
      "path": "snippet/arena.json",
      "output": "",
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 60,
      "autosave": true
    },
    {
      "type": "code",
      "id": "l50nc",
      "active": false,
      "focus": false,
      "start": 0,
      "drag_x": 155.00325517262743,
      "drag_y": 483.2454425970151,
      "drag_w": 920,
      "drag_h": 430,
      "focused": false,
      "output": "// ------------\n// UTILITIES\n// ------------\n\n/**\n@template T\n@param {string} auth \n@param {string} url \n@param {string | Object} body \n@returns {Promise<T>}\n*/\nfunction POST(url, body, auth){\n  let b = typeof body == \"object\" ? JSON.stringify(body): \n    typeof body == \"string\" ? body : console.error(\"body unexpected\")\n  if (!b) throw Error(\"no body\")\n  \n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${auth}`,\n      \"Content-Type\": \"application/json\",\n      cache: \"no-store\",\n      \"Cache-Control\": \"max-age=0, no-cache\",\n      referrerPolicy: \"no-referrer\",\n    },\n    body: b\n  }).then((res) => {\n      const contentType = res.headers.get(\"content-type\");\n      if (contentType  && contentType.indexOf(\"application/json\") !== -1) {\n        return res.json()\n      } else {\n        return res.ok\n      }\n  })\n}\n\n/**\n@template T\n@param {string} auth \n@param {string} url \n@returns {Promise<T>}\n*/\nasync function GET(url, auth){\n  console.log(\"url\", url)\n  console.log(\"auth\", auth)\n  return fetch(url, {\n    headers: {\n      Authorization: `Bearer ${auth}`,\n      cache: \"no-store\",\n      \"Cache-Control\": \"max-age=0, no-cache\",\n      referrerPolicy: \"no-referrer\",\n    }\n  }).then((res) => \n    {\n      const contentType = res.headers.get(\"content-type\");\n      if (contentType  && contentType.indexOf(\"application/json\") !== -1) {\n        return res.json()\n      } else {\n        return res\n      }\n    })\n}\n\n/**\n@template T\n@param {string} auth \n@param {string} url \n@param {string | Object} body \n@returns {Promise<T>}\n*/\nfunction PUT(url, body, auth){\n  let b = typeof body == \"object\" ? JSON.stringify(body): \n    typeof body == \"string\" ? body : console.error(\"body unexpected\")\n  if (!b) throw Error(\"no body\")\n\n  console.log(\"body\", b)\n  console.log(\"url\", url)\n  \n  return fetch(url, {\n    method: \"PUT\",\n    headers: {\n      Authorization: `Bearer ${auth}`,\n      \"Content-Type\": \"application/json\",\n      cache: \"no-store\",\n      \"Cache-Control\": \"max-age=0, no-cache\",\n      referrerPolicy: \"no-referrer\",\n    },\n    body: b\n  })\n    .then((res) => {\n      const contentType = res.headers.get(\"content-type\");\n      if (contentType  && contentType.indexOf(\"application/json\") !== -1) {\n        return res.json()\n      } else {\n        return res.ok\n      }\n    })\n}\n\nfunction DELETE(url, auth){\n return fetch(url, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + auth,\n    },\n    method: \"DELETE\",\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 1444
    },
    {
      "id": "tingipungi",
      "type": "code",
      "output": "/**\n* @typedef {Object} Options\n* @property {string} auth\n* @property {string} host\n\n* @typedef {Object} MaybeOptions\n* @property {string=} auth\n* @property {string=} host\n\n* @param {MaybeOptions=} opts \n*/\nfunction Arena(opts) {\n  let auth = opts?.auth ? opts.auth : \"\"\n  let host = opts?.host ? opts.host : \"https://api.are.na/v2/\"\n  \n  return {\n    me: async () => {\n      if (!auth) {\n        console.warn(\"No Auth\")  \n        return \n      }\n\n      return await GET(host + \"me\", auth)\n    },\n    channel: (slug) => ({\n      get: () =>  get_channel(slug, {auth, host}),\n      create_block: (body) => create_block(slug, body, {auth, host}),\n      disconnect_block: (id) => disconnect_block(slug, id, {auth, host}),\n      hack_refresh: () => hack_refresh(slug, {auth, host})\n    }),\n    \n    block: (slug) => ({\n      get: () => get_block(slug, {auth, host}),\n      update: (body) => update_block(slug, body, {auth, host}),\n    })\n  }\n}\n\nexport {Arena}\n\n//TEST(\"channel\")\n\n\n\n\n\n\n",
      "active": false,
      "focus": false,
      "start": 2519,
      "drag_x": 67.72504340767858,
      "drag_y": 1067.9769963499477,
      "focused": false,
      "cursor": 716,
      "drag_w": 700,
      "drag_h": 820
    },
    {
      "type": "code",
      "id": "n8hnvl",
      "active": true,
      "focus": true,
      "start": 3499,
      "drag_x": 800.6677517242105,
      "drag_y": 1059.7413192708148,
      "drag_w": 600,
      "drag_h": 360,
      "focused": false,
      "output": "/**\n* @param {String} slug \n* @param {Options} opts \n* @returns {Promise<Channel>}\n*/\nasync function get_channel(slug, opts){\n  return await GET(opts.host \n                   + \"channels/\" \n                   + slug \n                   + \"?per=100\"\n                   , opts.auth\n                  )\n}\n\nasync function hack_refresh(slug, opts){\n  return create_block(slug, {content : \"TBR\"}, opts)\n    .then((res) => disconnect_block(slug, res.id, opts))\n}\n\n/**\n* @typedef {Object} Channel \n* @property {number} id\n* @property {string} title\n* @property {Date} created_at\n* @property {Date} updated_at\n* @property {boolean} published\n* @property {boolean} open\n* @property {boolean} collaboration\n* @property {string} slug\n* @property {number} length\n* @property {string} kind\n* @property {string} status\n* @property {number} user_id\n* @property {string} class\n* @property {string} base_class\n* @property {User} user\n* @property {number} total_pages\n* @property {number} current_page\n* @property {number} per\n* @property {number} follower_count\n* @property {(Block | Channel)[]} contents\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 478
    },
    {
      "type": "code",
      "id": "gpxoel",
      "active": false,
      "focus": false,
      "start": 4602,
      "drag_x": 800.6677517242106,
      "drag_y": 1469.7413192708148,
      "drag_w": 640,
      "drag_h": 420,
      "focused": false,
      "output": "/**\n* @param {(string | number)} slug \n* @param {Options} opts \n* @returns {Promise<Block>}\n*/\nasync function get_block(slug, opts){\n  return  await\n    GET(opts.host  \n        + \"blocks/\"  \n        + slug, opts.auth)\n}\n\n\n/**\n* @typedef {Object} CreateBlockRequest\n* @property {string} content\n* @property {string=} source\n* @param {(string | number)} channel_slug \n* @param {CreateBlockRequest} request_data \n* @param {Options} opts \n* @returns {Promise<Block>}\n*/\nasync function create_block(channel_slug, request_data, opts){\n  return await POST(opts.host \n                    + \"channels/\"\n                    + channel_slug\n                    + \"/blocks\"\n                    , request_data\n                    , opts.auth\n                   )\n}\n\n/**\n* @typedef {Object} UpdateBlockRequest\n* @property {string=} content\n* @property {string=} title\n* @property {string=} description\n* @param {number} id \n* @param {UpdateBlockRequest} request_data \n* @param {Options} opts \n* @returns {Promise<Block>}\n*/\nasync function update_block(id, request_data, opts){\n  return await PUT(opts.host \n                    + \"blocks/\"\n                    + id\n                    , request_data\n                    , opts.auth\n                   )\n}\n\n/**\n* @param {number} id \n* @param {Options} opts \n*/\nasync function disconnect_block(channel_slug, id, opts){\n  console.log(\"disconnecting from\", channel_slug, \"block\", id )\n  return DELETE(opts.host \n                + \"channels/\"\n                + channel_slug\n                + \"/blocks/\"\n                + id\n                , opts.auth\n               )\n}\n\n/**\n* @typedef {Object} Block\n  @property {number} id\n  @property {string | null} title\n  @property {Date} updated_at\n  @property {Date} created_at\n  @property {\"Available\" | \"Failure\" | \"Procesed\" | \"Processing\"} state\n  @property {number} comment_count\n  @property {string} generated_title\n  @property {\"Image\" | \"Text\" | \"Link\" | \"Media\" | \"Attachment\"} class\n  @property {\"Block\"} base_class\n  @property {string | null} content\n  @property {string | null} content_html\n  @property {string | null} description\n  @property {string | null} description_html\n  @property {null | { title?: string; url: string; provider: { name: string; url: string; } | null; }} source\n  @property {null | { content_type: string; display: { url: string }; filename: string; lage: { url: string }, original: { file_size: number; file_size_display: string; url: string; }; square: { url: string }; thumb: { url: string }; updated_at: Date; }} image\n*/\n\n\n\n\n\n\n",
      "cursor": 1411
    },
    {
      "type": "code",
      "id": "40rkwn",
      "start": 7141,
      "drag_x": 110.71339978869045,
      "drag_y": 1951.1196655794938,
      "focused": false,
      "output": "import {h, render,sig, mem}  from \"/lib/solid/monke.js\"\nimport {JsonViewer} from \"/js/snippet/JsonViewer.json\"\n\n/**\n@param {\"channel\" | \"block\"} type\n*/\nfunction TEST(type){\n  let test_block_id = 31127597 \n  let test_channel_slug = \"jose-aisle\" \n  document.body.style.fontFamily = \"monospace\"\n  \n  let bing = Arena()\n\n  if (type == \"channel\"){\n    bing.channel(test_channel_slug).get()\n      .then((res) => {\n        let new_ren = new JsonViewer(res)\n        r.set(new_ren.render.bind(new_ren))\n      })\n  } \n\n  if(type == \"block\"){\n    bing.block.get(test_block_id)\n      .then((block) => {\n        block.image?.thumb.url\n        let new_ren = new JsonViewer(block)\n        r.set(new_ren.render.bind(new_ren))\n      })\n  }\n\n  let r = sig(() => h(\"div\", \"loading...\"))\n  render(() => r, document.body)\n}\n\n\n\n\n\n",
      "cursor": 531,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 830
    },
    {
      "type": "sandbox",
      "id": "fptu49",
      "active": false,
      "focus": false,
      "start": 7950,
      "drag_x": 2618.1503902658405,
      "drag_y": 1927.4270831653057,
      "drag_w": 600,
      "drag_h": 840,
      "output": "",
      "focused": false,
      "renderer": "function (state) {\n  const shadow = (color, size, offset=0) => {\n    return `\n    text-shadow: \n      -${size}px -${size}px ${Math.random() * offset}px ${color},\n       ${size}px -${size}px ${Math.random() * offset}px ${color},\n      -${size}px ${size}px ${Math.random() * offset} ${color},\n       ${size}px ${size}px ${Math.random() * offset}px ${color};`\n  }\n\n  let f = num => (Math.round(num * 100) / 100).toFixed(2);\n  let size = sig(4.2)\n  let c = sig(1)\n  let mul = sig(1.5)\n  \n  let onmousemove = e => {\n    let bbox = e.target.getBoundingClientRect()\n    let x = e.clientX - bbox.x\n    let y =  e.clientY - bbox.y\n    let w = bbox.width\n    let h_ = bbox.height\n    c.set(x/w)\n    mul.set(1 + 2*y/h_)\n  }\n\n  let style = mem(() => `\n   background-color: white;\n   border-radius: 100px;\n   color: white;\n   background-size: 20px 20px;\n   background-image:\n    linear-gradient(to right, #0002 1px, transparent 1px),\n    linear-gradient(to bottom, #0002 1px, transparent 1px); \n                  \n   font-size: ${size() / c()}em;\n   filter:  blur(${c()*2}px);\n   box-shadow: 0 0 ${f(size() * c() * 2)}px ${f(c() * c() * 2)}px #0004;\n   ${shadow(\"blue\", f(size() * mul()))}`\n  )\n\n  let parent = `\n    width:100%;\n    height:100%;\n    background: #ddd;\n    cursor: crosshair;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    \n   background-size: 80px 60px;\n   background-image:\n    linear-gradient(to right, #0002 1px, transparent 1px),\n    linear-gradient(to bottom, #0002 1px, transparent 1px); \n  `\n\n  let dom = mem(() => [\n    h(\"p\",{style}, \"100m\"),\n    h(\"p\",{style}, \"projects\"),\n    h(\"p\",{style}, \"open-studio\"),\n    h(\"p\",{style}, \"studios\"),\n  ]\n    // style().split(`\\n`).map((e) => \n    //   h(\"p\", {style}, e)\n    // )\n               )\n  \n  return  h(\"div\",{style:parent, onmousemove}, dom )\n}",
      "cursor": 0
    },
    {
      "type": "sandbox",
      "id": "9b7mu",
      "active": false,
      "focus": false,
      "start": 7950,
      "drag_x": 3258.1503902658405,
      "drag_y": 1927.4270831653057,
      "drag_w": 600,
      "drag_h": 840,
      "output": "",
      "focused": false,
      "renderer": "function (state) {\n  const shadow = (color, size, offset=0) => {\n    return `\n    text-shadow: \n      -${size}px -${size}px ${Math.random() * offset}px ${color},\n       ${size}px -${size}px ${Math.random() * offset}px ${color},\n      -${size}px ${size}px ${Math.random() * offset} ${color},\n       ${size}px ${size}px ${Math.random() * offset}px ${color};`\n  }\n\n  let f = num => (Math.round(num * 100) / 100).toFixed(2);\n  let size = sig(4.2)\n  let c = sig(1)\n  let mul = sig(1.5)\n  \n  let onmousemove = e => {\n    let bbox = e.target.getBoundingClientRect()\n    let x = e.clientX - bbox.x\n    let y =  e.clientY - bbox.y\n    let w = bbox.width\n    let h_ = bbox.height\n    c.set(x/w)\n    mul.set(1 + 2*y/h_)\n  }\n\n  let style = mem(() => `\n   background-color: white;\n   border-radius: 100px;\n   color: white;\n   background-size: 20px 20px;\n   background-image:\n    linear-gradient(to right, #0002 1px, transparent 1px),\n    linear-gradient(to bottom, #0002 1px, transparent 1px); \n                  \n   font-size: ${size() / c()}em;\n   filter:  blur(${c()*2}px);\n   box-shadow: 0 0 ${f(size() * c() * 2)}px ${f(c() * c() * 2)}px #0004;\n   ${shadow(\"blue\", f(size() * mul()))}`\n  )\n\n  let parent = `\n    width:100%;\n    height:100%;\n    background: #ddd;\n    cursor: crosshair;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    \n   background-size: 80px 60px;\n   background-image:\n    linear-gradient(to right, #0002 1px, transparent 1px),\n    linear-gradient(to bottom, #0002 1px, transparent 1px); \n  `\n\n  let dom = mem(() => [\n    h(\"p\",{style}, \"100m\"),\n    h(\"p\",{style}, \"open-studio\"),\n  ]\n    // style().split(`\\n`).map((e) => \n    //   h(\"p\", {style}, e)\n    // )\n               )\n  \n  return  h(\"div\",{style:parent, onmousemove}, dom )\n}",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "1iocik",
      "start": 7950,
      "drag_x": 2618.537813647835,
      "drag_y": 456.36554658804164,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 1200
    },
    {
      "type": "code",
      "id": "zq0k7",
      "start": 7973,
      "drag_x": 3348.962269644563,
      "drag_y": 625.697253327224,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 1200
    },
    {
      "type": "group",
      "id": "guq42x",
      "active": false,
      "start": 7990,
      "drag_x": 4009.8317011020686,
      "drag_y": 477.8446976661296,
      "drag_w": 600,
      "drag_h": 1200,
      "output": "",
      "blocks": [],
      "focus": false
    },
    {
      "type": "code",
      "id": "d22ovl",
      "start": 7990,
      "drag_x": 4747.357775971194,
      "drag_y": 1200.244157939201,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 60
    },
    {
      "type": "code",
      "id": "bra7t",
      "start": 8014,
      "drag_x": 4756.580811147807,
      "drag_y": 1318.565313470901,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 1200
    }
  ],
  "output": "",
  "properties": {
    "panzoom": {
      "initialX": -540.7917524964201,
      "initialY": -748.1340104856971,
      "initialZoom": 0.8003217944886418
    },
    "buffer": [
      2,
      3,
      4,
      4,
      5
    ]
  }
}