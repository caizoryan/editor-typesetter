{
  "blocks": [
    {
      "type": "save-component",
      "id": "ntiecf",
      "start": 0,
      "drag_x": 56.42465753424656,
      "drag_y": 36.493150684931535,
      "path": "snippet/100m.json",
      "output": "",
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 60,
      "autosave": true
    },
    {
      "type": "code",
      "id": "l50nc",
      "active": false,
      "focus": false,
      "start": 0,
      "drag_x": 155.00325517262743,
      "drag_y": 483.2454425970151,
      "drag_w": 600,
      "drag_h": 430,
      "focused": false,
      "output": "// UTILITIES\nfunction POST(url, body, headers){}\n\n\n/**\n@template T\n@returns {Promise<T>}\n*/\nasync function GET(url, headers){\n  return fetch(url,\n               {\n               headers: { \"Access-Control-Allow-Origin\": \"*\" },\n               }\n              // , {headers}\n              ).then((res) => res.json())\n}\nfunction PUT(){}\nfunction DELETE(){}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0
    },
    {
      "id": "tingipungi",
      "type": "code",
      "output": "/**\n* @typedef {Object} Options\n* @property {string} auth\n* @property {string} host\n\n* @typedef {Object} MaybeOptions\n* @property {string=} auth\n* @property {string=} host\n\n* @param {MaybeOptions=} opts \n*/\nfunction Arena(opts) {\n  let auth = opts?.auth ? opts.auth : \"\"\n  let host = opts?.host ? opts.host : \"https://api.are.na/v2/\"\n\n  \n  return {\n    channel: {\n      get: (slug) => get_channel(slug, {auth, host}),\n      create_block: () => {}\n    },\n    block: {\n      get: (slug) => get_block(slug, {auth, host})\n    }\n  }\n}\n\n\nexport {Arena}\n\n//TEST(\"block\")\n\n\n\n\n\n\n\n\n",
      "active": false,
      "focus": false,
      "start": 369,
      "drag_x": 117.72504340767858,
      "drag_y": 1067.9769963499477,
      "focused": false,
      "cursor": 0,
      "drag_w": 550,
      "drag_h": 820
    },
    {
      "type": "code",
      "id": "n8hnvl",
      "active": false,
      "focus": false,
      "start": 941,
      "drag_x": 740.6677517242105,
      "drag_y": 1079.7413192708148,
      "drag_w": 600,
      "drag_h": 330,
      "focused": false,
      "output": "/**\n* @param {String} slug \n* @param {Options} opts \n* @returns {Promise<Channel>}\n*/\nasync function get_channel(slug, opts){\n  return await GET(opts.host + \"channels/\" + slug)\n}\n\n/**\n* @typedef {Object} Channel \n* @property {number} id\n* @property {string} title\n* @property {Date} created_at\n* @property {Date} updated_at\n* @property {boolean} published\n* @property {boolean} open\n* @property {boolean} collaboration\n* @property {string} slug\n* @property {number} length\n* @property {string} kind\n* @property {string} status\n* @property {number} user_id\n* @property {string} class\n* @property {string} base_class\n* @property {User} user\n* @property {number} total_pages\n* @property {number} current_page\n* @property {number} per\n* @property {number} follower_count\n* @property {(Block | Channel)[]} contents\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "gpxoel",
      "active": false,
      "focus": false,
      "start": 1769,
      "drag_x": 740.6677517242106,
      "drag_y": 1459.7413192708148,
      "drag_w": 600,
      "drag_h": 350,
      "focused": false,
      "output": "/**\n* @param {(string | number)} slug \n* @param {Options} opts \n* @returns {Promise<Block>}\n*/\nasync function get_block(slug, opts){\n  return await GET(opts.host + \"blocks/\" + slug, opts)\n}\n\n/**\n* @typedef {Object} Block\n  @property {number} id\n  @property {string | null} title\n  @property {Date} updated_at\n  @property {Date} created_at\n  @property {\"Available\" | \"Failure\" | \"Procesed\" | \"Processing\"} state\n  @property {number} comment_count\n  @property {string} generated_title\n  @property {\"Image\" | \"Text\" | \"Link\" | \"Media\" | \"Attachment\"} class\n  @property {\"Block\"} base_class\n  @property {string | null} content\n  @property {string | null} content_html\n  @property {string | null} description\n  @property {string | null} description_html\n  @property {null | { title?: string; url: string; provider: { name: string; url: string; } | null; }} source\n  @property {null | { content_type: string; display: { url: string }; filename: string; lage: { url: string }, original: { file_size: number; file_size_display: string; url: string; }; square: { url: string }; thumb: { url: string }; updated_at: Date; }} image\n*/\n\n\n\n\n\n\n\n\n",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "40rkwn",
      "start": 2900,
      "drag_x": 110.71339978869045,
      "drag_y": 1951.1196655794938,
      "focused": false,
      "output": "import {h, render,sig, mem}  from \"/lib/solid/monke.js\"\nimport {JsonViewer} from \"/js/snippet/JsonViewer.json\"\n\n/**\n@param {\"channel\" | \"block\"} type\n*/\nfunction TEST(type){\n  let test_block_id = 31127597 \n  let test_channel_slug = \"jose-aisle\" \n  document.body.style.fontFamily = \"monospace\"\n  \n  let bing = Arena()\n\n  if (type == \"channel\"){\n    bing.channel.get(test_channel_slug)\n      .then((res) => {\n        let new_ren = new JsonViewer(res)\n        r.set(new_ren.render.bind(new_ren))\n      })\n  } \n\n  if(type == \"block\"){\n    bing.block.get(test_block_id)\n      .then((block) => {\n        block.image?.thumb.url\n        let new_ren = new JsonViewer(block)\n        r.set(new_ren.render.bind(new_ren))\n      })\n  }\n\n  let r = sig(() => h(\"div\", \"loading...\"))\n  render(() => r, document.body)\n}\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 830
    },
    {
      "type": "sandbox",
      "id": "fptu49",
      "active": false,
      "focus": false,
      "start": 3709,
      "drag_x": 2618.1503902658405,
      "drag_y": 1927.4270831653057,
      "drag_w": 600,
      "drag_h": 1810,
      "output": "",
      "focused": false,
      "renderer": "function (state) {\n  const shadow = (color, size, offset=0) => {\n    return `\n    text-shadow: \n      -${size}px -${size}px ${Math.random() * offset}px ${color},\n       ${size}px -${size}px ${Math.random() * offset}px ${color},\n      -${size}px ${size}px ${Math.random() * offset} ${color},\n       ${size}px ${size}px ${Math.random() * offset}px ${color};`\n  }\n\n  let f = num => (Math.round(num * 100) / 100).toFixed(2);\n  let size = sig(4.2)\n  let c = sig(1)\n  let mul = sig(1.5)\n  \n  let onmousemove = e => {\n    let bbox = e.target.getBoundingClientRect()\n    let x = e.clientX - bbox.x\n    let y =  e.clientY - bbox.y\n    let w = bbox.width\n    let h_ = bbox.height\n    c.set(x/w)\n    mul.set(1 + 2*y/h_)\n  }\n\n  let style = mem(() => `\n   background-color: white;\n   border-radius: 100px;\n   color: white;\n   background-size: 20px 20px;\n   background-image:\n    linear-gradient(to right, #0002 1px, transparent 1px),\n    linear-gradient(to bottom, #0002 1px, transparent 1px); \n                  \n   font-size: ${size() / c()}em;\n   filter:  blur(${c()*2}px);\n   box-shadow: 0 0 ${f(size() * c() * 2)}px ${f(c() * c() * 2)}px #0004;\n   ${shadow(\"blue\", f(size() * mul()))}`\n  )\n\n  let parent = `\n    width:100%;\n    height:100%;\n    background: #ddd;\n    cursor: crosshair;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    \n   background-size: 80px 60px;\n   background-image:\n    linear-gradient(to right, #0002 1px, transparent 1px),\n    linear-gradient(to bottom, #0002 1px, transparent 1px); \n  `\n\n  let dom = mem(() => [\n    h(\"p\",{style}, \"100m\"),\n    h(\"p\",{style}, \"projects\"),\n    h(\"p\",{style}, \"open-studio\"),\n    h(\"p\",{style}, \"studios\"),\n  ]\n    // style().split(`\\n`).map((e) => \n    //   h(\"p\", {style}, e)\n    // )\n               )\n  \n  return  h(\"div\",{style:parent, onmousemove}, dom )\n}",
      "cursor": 0
    },
    {
      "type": "sandbox",
      "id": "9b7mu",
      "active": false,
      "focus": false,
      "start": 3709,
      "drag_x": 3258.1503902658405,
      "drag_y": 1927.4270831653057,
      "drag_w": 600,
      "drag_h": 840,
      "output": "",
      "focused": false,
      "renderer": "function (state) {\n  const shadow = (color, size, offset=0) => {\n    return `\n    text-shadow: \n      -${size}px -${size}px ${Math.random() * offset}px ${color},\n       ${size}px -${size}px ${Math.random() * offset}px ${color},\n      -${size}px ${size}px ${Math.random() * offset} ${color},\n       ${size}px ${size}px ${Math.random() * offset}px ${color};`\n  }\n\n  let f = num => (Math.round(num * 100) / 100).toFixed(2);\n  let size = sig(4.2)\n  let c = sig(1)\n  let mul = sig(1.5)\n  \n  let onmousemove = e => {\n    let bbox = e.target.getBoundingClientRect()\n    let x = e.clientX - bbox.x\n    let y =  e.clientY - bbox.y\n    let w = bbox.width\n    let h_ = bbox.height\n    c.set(x/w)\n    mul.set(1 + 2*y/h_)\n  }\n\n  let style = mem(() => `\n   background-color: white;\n   border-radius: 100px;\n   color: white;\n   background-size: 20px 20px;\n   background-image:\n    linear-gradient(to right, #0002 1px, transparent 1px),\n    linear-gradient(to bottom, #0002 1px, transparent 1px); \n                  \n   font-size: ${size() / c()}em;\n   filter:  blur(${c()*2}px);\n   box-shadow: 0 0 ${f(size() * c() * 2)}px ${f(c() * c() * 2)}px #0004;\n   ${shadow(\"blue\", f(size() * mul()))}`\n  )\n\n  let parent = `\n    width:100%;\n    height:100%;\n    background: #ddd;\n    cursor: crosshair;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    \n   background-size: 80px 60px;\n   background-image:\n    linear-gradient(to right, #0002 1px, transparent 1px),\n    linear-gradient(to bottom, #0002 1px, transparent 1px); \n  `\n\n  let dom = mem(() => [\n    h(\"p\",{style}, \"100m\"),\n    h(\"p\",{style}, \"open-studio\"),\n  ]\n    // style().split(`\\n`).map((e) => \n    //   h(\"p\", {style}, e)\n    // )\n               )\n  \n  return  h(\"div\",{style:parent, onmousemove}, dom )\n}",
      "cursor": 0
    },
    {
      "type": "sandbox",
      "id": "h6h7f",
      "active": false,
      "focus": false,
      "start": 3709,
      "drag_x": 3908.1503902658405,
      "drag_y": 1927.4270831653057,
      "drag_w": 770,
      "drag_h": 1220,
      "output": "",
      "focused": false,
      "renderer": "function (state) {\n  let width = 100\n  let height = 100\n  \n  let mouseX = sig(0)\n  let mouseY = sig(0)\n  \n  // can only listen to one\n  // but speak to many\n\n  let speaker = (init) => {\n    const signal = init\n    const listeners = []\n    \n    eff_on(signal, () => send_message(signal()))\n    \n    const send_message = (val) => {\n      listeners.forEach((listen) => listen(val))\n    }\n    \n    return{\n      // wont be able to remove listener, have an id...\n      add_listener: (val) => listeners.push(val)\n      \n    }\n  }\n\n  // listener takes a fn that gets run every time \n  // registered listeners send value\n  // speakers can be added to returned object\n  let listener = (fn, init=0) => {\n    let val = sig(init)\n    eff_on(val, () => fn(val()))\n    return {\n      listen: (value) => val.set(value)\n    }\n  }\n\n  let speak_x = speaker(mouseX)\n  let speak_y = speaker(mouseY)\n\n\n  let top = sig(0)\n  let left = sig(0)\n  \n  speak_x.add_listener(left.set)\n  speak_y.add_listener(top.set)\n\n  let css = mem(() => `\n    /*position: absolute;*/\n    background-color: rgba(${top()},${left()},50, ${top()/left()+.1});\n    width: 100px;\n    height: 100px;\n    display: flex;\n    flex-direction: column;\n    justify-content:center;\n    align-items:center;\n  `)\n  \n  let onmousemove = e => {\n    if(e.target != e.currentTarget) return\n    let bbox = e.target.getBoundingClientRect()\n    let x = e.clientX - bbox.x\n    let y =  e.clientY - bbox.y\n    let w = bbox.width\n    let h_ = bbox.height\n\n    width = w\n    height = h_\n\n    mouseX.set(x.toFixed(2))\n    mouseY.set(y.toFixed(2))\n  }\n\n\n  let parent = `\n    width:100%;\n    height:100%;\n    background: #ddd;\n    cursor: crosshair;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    \n   background-size: 80px 60px;\n   background-image:\n    linear-gradient(to right, #0002 1px, transparent 1px),\n    linear-gradient(to bottom, #0002 1px, transparent 1px); \n  `\n \n  return  h(\"div\",{style:parent, onmousemove},\n            h(\"div\", {style: css},\n            \"x:\", mouseX, h(\"br\"), \"y:\", mouseY ,\n             )\n           )\n}",
      "cursor": 0
    },
    {
      "type": "sandbox",
      "id": "td8zlr",
      "active": true,
      "focus": true,
      "start": 3709,
      "drag_x": 5204.45083697796,
      "drag_y": 1970.1568579729962,
      "drag_w": 600,
      "drag_h": 1580,
      "output": "",
      "focused": false,
      "renderer": "function (state) {\n  const shadow = (color, size, offset=0) => {\n    return `\n    text-shadow: \n      -${size}px -${size}px ${Math.random() * offset}px ${color},\n       ${size}px -${size}px ${Math.random() * offset}px ${color},\n      -${size}px ${size}px ${Math.random() * offset} ${color},\n       ${size}px ${size}px ${Math.random() * offset}px ${color};`\n  }\n\n  let f = num => (Math.round(num * 100) / 100).toFixed(2);\n  let size = sig(4.2)\n  let c = sig(1)\n  let mul = sig(1.5)\n  \n  let onmousemove = e => {\n    let bbox = e.target.getBoundingClientRect()\n    let x = e.clientX - bbox.x\n    let y =  e.clientY - bbox.y\n    let w = bbox.width\n    let h_ = bbox.height\n    c.set(x/w)\n    mul.set(1 + 2*y/h_)\n  }\n\n  let style = mem(() => `\n   background-color: white;\n   border-radius: 100px;\n   color: white;\n   background-size: 20px 20px;\n   background-image:\n    linear-gradient(to right, #0002 1px, transparent 1px),\n    linear-gradient(to bottom, #0002 1px, transparent 1px); \n    mix-blend-mode: difference;\n                  \n   font-size: ${size() / c()}em;\n   filter:  blur(${c()*2}px);\n   box-shadow: 0 0 ${f(size() * c() * 2)}px ${f(c() * c() * 2)}px #0004;\n   ${shadow(\"green\", f(size() * mul()))}`\n  )\n\n  let parent = `\n    width:100%;\n    height:100%;\n    background: green;\n    cursor: crosshair;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    \n   background-size: 80px 60px;\n   background-image:\n    linear-gradient(to right, #0002 1px, transparent 1px),\n    linear-gradient(to bottom, #0002 1px, transparent 1px); \n  `\n\n  let dom = mem(() => [\n    h(\"p\",{style}, \"seed\"),\n    h(\"p\",{style}, \"bomb\"),\n    h(\"p\",{style}, \"(!!!!)\"),\n  ]\n    // style().split(`\\n`).map((e) => \n    //   h(\"p\", {style}, e)\n    // )\n               )\n  \n  return  h(\"div\",{style:parent, onmousemove}, dom )\n}",
      "cursor": 1286
    },
    {
      "type": "code",
      "id": "1iocik",
      "start": 3709,
      "drag_x": 1825.66043776618,
      "drag_y": 1155.6401014890073,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 1200
    },
    {
      "type": "code",
      "id": "zq0k7",
      "start": 3734,
      "drag_x": 3348.962269644563,
      "drag_y": 625.697253327224,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 1200
    },
    {
      "type": "group",
      "id": "guq42x",
      "active": false,
      "start": 3753,
      "drag_x": 4009.8317011020686,
      "drag_y": 477.8446976661296,
      "drag_w": 600,
      "drag_h": 1200,
      "output": "",
      "blocks": [],
      "focus": false
    },
    {
      "type": "code",
      "id": "d22ovl",
      "start": 3753,
      "drag_x": 4747.357775971194,
      "drag_y": 1200.244157939201,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 60
    },
    {
      "type": "code",
      "id": "bra7t",
      "start": 3779,
      "drag_x": 4783.93365655009,
      "drag_y": 1339.2002424125653,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 1200
    }
  ],
  "output": "",
  "properties": {
    "panzoom": {
      "initialX": -2236.1358728750106,
      "initialY": -1071.5629186137396,
      "initialZoom": 0.5730337078651685
    },
    "buffer": [
      2,
      3,
      4,
      4,
      5
    ]
  }
}